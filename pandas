create Data Frame From the list

Write a solution to create a DataFrame from a 2D list called student_data. This 2D list contains the IDs and ages of some students.

The DataFrame should have two columns, student_id and age, and be in the same order as the original 2D list.

The result format is in the following example.
1)
 

Example 1:

Input:
student_data:
[
  [1, 15],
  [2, 11],
  [3, 11],
  [4, 20]
]
Output:
+------------+-----+
| student_id | age |
+------------+-----+
| 1          | 15  |
| 2          | 11  |
| 3          | 11  |
| 4          | 20  |
+------------+-----+
*********************************

import pandas as pd

def createDataframe(student_data: List[List[int]]) -> pd.DataFrame:
    df=pd.DataFrame(student_data,columns=["student_id","age"])
    print(df)
    return df
*************************************************************************************************************************************************
2)
Size of the dataFrame
import pandas as pd

def getDataframeSize(players: pd.DataFrame) -> List[int]:
    rows,column=players.shape
    a=[rows,column]
    return a
    ****************************************************************************
3)
    Display first three rows
import pandas as pd

def selectFirstRows(employees: pd.DataFrame) -> pd.DataFrame:
    return employees.head(3)
    
**************************************************************************************************
4)
Write a solution to select the name and age of the student with student_id = 101.
import pandas as pd

def selectData(students: pd.DataFrame) -> pd.DataFrame:
    result=students.loc[students['student_id']==101,['name','age']]
    return result
practice--
import pandas as pd
arr=np.arange(20).reshape(5,4)
df=pd.DataFrame(arr,index=['a','b','c','d','e'])
print(df.loc[df[0]>5])

practice
import pandas as pd
import numpy as np
arr=np.arange(10).reshape(5,2)
df=pd.DataFrame(arr,index=['a','b','c','d','e'])
df.loc[['a']]
********************************************************************************************************************************
5)
Write a solution to create a new column name bonus that contains the doubled values of the salary column.

import pandas as pd

def createBonusColumn(employees: pd.DataFrame) -> pd.DataFrame:
    employees['bonus']=employees['salary']*2
    return employees
    
************************************************************************************************
6)
Drop  a missing data
There are some rows having missing values in the name column.

Write a solution to remove the rows with missing values.

The result format is in the following example.


import pandas as pd

def dropMissingData(students: pd.DataFrame) -> pd.DataFrame:
    return students.dropna(subset=['name'])
********************************************************************************************************
7)
 There are some duplicate rows in the DataFrame based on the email column.

Write a solution to remove these duplicate rows and keep only the first occurrence.

The result format is in the following example.

 

Example 1:
Input:
+-------------+---------+---------------------+
| customer_id | name    | email               |
+-------------+---------+---------------------+
| 1           | Ella    | emily@example.com   |
| 2           | David   | michael@example.com |
| 3           | Zachary | sarah@example.com   |
| 4           | Alice   | john@example.com    |
| 5           | Finn    | john@example.com    |
| 6           | Violet  | alice@example.com   |
+-------------+---------+---------------------+
Output:  
+-------------+---------+---------------------+
| customer_id | name    | email               |
+-------------+---------+---------------------+
| 1           | Ella    | emily@example.com   |
| 2           | David   | michael@example.com |
| 3           | Zachary | sarah@example.com   |
| 4           | Alice   | john@example.com    |
| 6           | Violet  | alice@example.com   |
+-------------+---------+---------------------+
import pandas as pd

def dropDuplicateEmails(customers: pd.DataFrame) -> pd.DataFrame:
    return customers.drop_duplicates(subset=['email'],keep='first')

**************************************************************************************************************************************
8)
A company intends to give its employees a pay rise.

Write a solution to modify the salary column by multiplying each salary by 2.

The result format is in the following example


import pandas as pd

def modifySalaryColumn(employees: pd.DataFrame) -> pd.DataFrame:
    employees['salary']=employees['salary']*2
    return employees
*************************************************************************************************************************************************
9)
Rename Column
Write a solution to rename the columns as follows:

id to student_id
first to first_name
last to last_name
age to age_in_years

import pandas as pd

def renameColumns(students: pd.DataFrame) -> pd.DataFrame:
    students.rename(columns={'id':'student_id','first':'first_name','last':'last_name','age':'age_in_years'},inplace=True)
    return students
****************************************************************************************************************************************************
10)
Change Data Type
import pandas as pd
Write a solution to correct the errors:
The grade column is stored as floats, convert it to integers.

def changeDatatype(students: pd.DataFrame) -> pd.DataFrame:
    students['grade']=students['grade'].astype('int')
    return students

*************************************************************************************************************************************************************
11)
Fill missing Data
Write a solution to fill in the missing value as 0 in the quantity column.
The result format is in the following example.

 import pandas as pd

def fillMissingValues(products: pd.DataFrame) -> pd.DataFrame:
    products['quantity']=products['quantity'].fillna(0)
    return products
*********************************************************
12)
Reshape Data:Concatenate
Write a solution to concatenate these two DataFrames vertically into one DataFrame.
DataFrame df1
+-------------+--------+
| Column Name | Type   |
+-------------+--------+
| student_id  | int    |
| name        | object |
| age         | int    |
+-------------+--------+

DataFrame df2
+-------------+--------+
| Column Name | Type   |
+-------------+--------+
| student_id  | int    |
| name        | object |
| age         | int    |
+-------------+--------+

 import pandas as pd

def concatenateTables(df1: pd.DataFrame, df2: pd.DataFrame) -> pd.DataFrame:
    df_concatenated=pd.concat([df1,df2],axis=0,ignore_index=True)
    return df_concatenated
  *************************************************************************************
  RESHAPE DATA:PIVOT
Write a solution to pivot the data so that each row represents temperatures for a specific month, and each city is a separate column.
The result format is in the following example.
Example 1:
Input:
+--------------+----------+-------------+
| city         | month    | temperature |
+--------------+----------+-------------+
| Jacksonville | January  | 13          |
| Jacksonville | February | 23          |
| Jacksonville | March    | 38          |
| Jacksonville | April    | 5           |
| Jacksonville | May      | 34          |
| ElPaso       | January  | 20          |
| ElPaso       | February | 6           |
| ElPaso       | March    | 26          |
| ElPaso       | April    | 2           |
| ElPaso       | May      | 43          |
+--------------+----------+-------------+
Output:
+----------+--------+--------------+
| month    | ElPaso | Jacksonville |
+----------+--------+--------------+
| April    | 2      | 5            |
| February | 6      | 23           |
| January  | 20     | 13           |
| March    | 26     | 38           |
| May      | 43     | 34           |
+----------+--------+--------------+
**********
import pandas as pd

def pivotTable(weather: pd.DataFrame) -> pd.DataFrame:
    pivoted_df=weather.pivot(index='month',columns='city',values='temperature')
    return pivoted_df
*****************************************************************************************************************************************************
Reshape Data:Melt
 Write a solution to reshape the data so that each row represents sales data for a product in a specific quarter.
The result format is in the following example.
Example 1:

Input:
+-------------+-----------+-----------+-----------+-----------+
| product     | quarter_1 | quarter_2 | quarter_3 | quarter_4 |
+-------------+-----------+-----------+-----------+-----------+
| Umbrella    | 417       | 224       | 379       | 611       |
| SleepingBag | 800       | 936       | 93        | 875       |
+-------------+-----------+-----------+-----------+-----------+
Output:
+-------------+-----------+-------+
| product     | quarter   | sales |
+-------------+-----------+-------+
| Umbrella    | quarter_1 | 417   |
| SleepingBag | quarter_1 | 800   |
| Umbrella    | quarter_2 | 224   |
| SleepingBag | quarter_2 | 936   |
| Umbrella    | quarter_3 | 379   |
| SleepingBag | quarter_3 | 93    |
| Umbrella    | quarter_4 | 611   |
| SleepingBag | quarter_4 | 875   |
+-------------+-----------+-------+
import pandas as pd

def meltTable(report: pd.DataFrame) -> pd.DataFrame:
    df1=pd.melt(report,id_vars=['product'],var_name='quarter',value_name='sales')
    return df1
**************************************************************************************************
Method Chaning

DataFrame animals
+-------------+--------+
| Column Name | Type   |
+-------------+--------+
| name        | object |
| species     | object |
| age         | int    |
| weight      | int    |
+-------------+--------+
Write a solution to list the names of animals that weigh strictly more than 100 kilograms.

Return the animals sorted by weight in descending order.

The result format is in the following example.

 

Example 1:

Input: 
DataFrame animals:
+----------+---------+-----+--------+
| name     | species | age | weight |
+----------+---------+-----+--------+
| Tatiana  | Snake   | 98  | 464    |
| Khaled   | Giraffe | 50  | 41     |
| Alex     | Leopard | 6   | 328    |
| Jonathan | Monkey  | 45  | 463    |
| Stefan   | Bear    | 100 | 50     |
| Tommy    | Panda   | 26  | 349    |
+----------+---------+-----+--------+
Output: 
+----------+
| name     |
+----------+
| Tatiana  |
| Jonathan |
| Tommy    |
| Alex     |
+----------+
Explanation: 
All animals weighing more than 100 should be included in the results table.
Tatiana's weight is 464, Jonathan's weight is 463, Tommy's weight is 349, and Alex's weight is 328.
The results should be sorted in descending order of weight.


import pandas as pd

def findHeavyAnimals(animals: pd.DataFrame) -> pd.DataFrame:
    return animals[animals['weight']>100].sort_values(by='weight',ascending=False)[['name']]
*******************************************************************************************************************************************************************************    
What Is Groupby Function In Pandas?


The groupby function in Pandas is used for grouping data based on certain columns and performing aggregate operations on those groups. 
It allows you to split the data into groups, apply some operations (like sum, mean, count, etc.), and combine the results. 

import pandas as pd

data = {'Team': ['A', 'A', 'B', 'B', 'C'],
        'Score': [10, 20, 15, 25, 30]}

df = pd.DataFrame(data)

# Group by 'Team' and calculate the sum of scores for each team
result = df.groupby('Team').sum()

print(result)
*****
data = {'Team': ['A', 'A', 'B', 'B', 'C'],
        'Player': ['P1', 'P2', 'P3', 'P4', 'P5'],
        'Score': [10, 20, 15, 25, 30]}

df = pd.DataFrame(data)

# Group by 'Team' and 'Player'
result = df.groupby(['Team', 'Player']).sum()

print(result)
*********************************************
Index column
*******
In context of to_excel() in Pandas, the parameter index=False means that the index column of the DataFrame will not be written to the Excel file.
***********************
How Can A Dataframe Be Converted To An Excel File?

import pandas as pd
data={'TEAMS':['A','B','C','D'],'SCORE':[10,15,10,20],'AGE':[16,18,20,22]}
b=pd.DataFrame(data)
c=b.to_excel('output.xlsx',index=False)
print(c)
**********************************************************************************************************
What Is Pandas Numpy Array?

 Pandas is built on top of NumPy, and its core data structures (Series and DataFrame) use NumPy arrays to store their data efficiently.

data = pd.DataFrame({
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [25, 30, 35],
    'Score': [90, 85, 88]
})

# Access the underlying NumPy array
numpy_array = data.to_numpy()
*****************************************************************************
. How Can You Iterate Over Dataframe In Pandas?

import pandas as pd
data={'TEAMS':['A','B','C','D'],'SCORE':[10,15,10,20],'AGE':[16,18,20,22]}
b=pd.DataFrame(data)
for index,rows in b.iterrows():
  print(f"{rows['SCORE']}{rows['AGE']}")
********************************************************************


    
       
    
