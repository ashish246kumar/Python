TOP K Frequent Element

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:
Input: nums = [1], k = 1
Output: [1]
 class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        frequency_dict = {}
        
        # Count the frequency of each number
        for num in nums:
            frequency_dict[num] = frequency_dict.get(num, 0) + 1
        
        # Sort the dictionary by frequency in descending order
        sorted_frequency_dict = dict(sorted(frequency_dict.items(), key=lambda item: item[1], reverse=True))
        
        count = 1
        l1=[]
        # Find the kth most frequent element
        for key, value in sorted_frequency_dict.items():
            l1.append(key)
            if count == k:
                return l1
            count += 1
        
        return l1
*********************************************************************************************************************************************************************************
Given an integer array nums and an integer k, return the kth largest element in the array.

Note that it is the kth largest element in the sorted order, not the kth distinct element.

Can you solve it without sorting?
***************************************************
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        minheap=nums[:k]
        heapq.heapify(minheap)
        for i in nums[k:]:
            if i>minheap[0]:
                heapq.heappushpop(minheap,i)
        return minheap[0]        
*********************************************************************************************************        
You are given an integer array nums. You have to find the maximum sum of a pair of numbers from nums such that the largest digit in both numbers is equal.

For example, 2373 is made up of three distinct digits: 2, 3, and 7, where 7 is the largest among them.

Return the maximum sum or -1 if no such pair exists.
Example 1:

Input: nums = [112,131,411]

Output: -1

class Solution:
    def maxSum(self, nums: List[int]) -> int:
        temp=0
        n=len(nums)
        for i in range(n-1):
            maxdigit=max(str(nums[i]))
            for j in range(i+1,n):
                maxdigit2=max(str(nums[j]))
                if maxdigit==maxdigit2:
                    temp=max(temp,nums[i]+nums[j])
        return -1 if temp==0 else temp            
*******************************************************        

