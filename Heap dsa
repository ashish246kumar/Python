TOP K Frequent Element

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:
Input: nums = [1], k = 1
Output: [1]
 class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        frequency_dict = {}
        
        # Count the frequency of each number
        for num in nums:
            frequency_dict[num] = frequency_dict.get(num, 0) + 1
        
        # Sort the dictionary by frequency in descending order
        sorted_frequency_dict = dict(sorted(frequency_dict.items(), key=lambda item: item[1], reverse=True))
        
        count = 1
        l1=[]
        # Find the kth most frequent element
        for key, value in sorted_frequency_dict.items():
            l1.append(key)
            if count == k:
                return l1
            count += 1
        
        return l1
*********************************************************************************************************************************************************************************
Given an integer array nums and an integer k, return the kth largest element in the array.

Note that it is the kth largest element in the sorted order, not the kth distinct element.

Can you solve it without sorting?
***************************************************
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        minheap=nums[:k]
        heapq.heapify(minheap)
        for i in nums[k:]:
            if i>minheap[0]:
                heapq.heappushpop(minheap,i)
        return minheap[0]        
*********************************************************************************************************        
You are given an integer array nums. You have to find the maximum sum of a pair of numbers from nums such that the largest digit in both numbers is equal.

For example, 2373 is made up of three distinct digits: 2, 3, and 7, where 7 is the largest among them.

Return the maximum sum or -1 if no such pair exists.
Example 1:

Input: nums = [112,131,411]

Output: -1

class Solution:
    def maxSum(self, nums: List[int]) -> int:
        temp=0
        n=len(nums)
        for i in range(n-1):
            maxdigit=max(str(nums[i]))
            for j in range(i+1,n):
                maxdigit2=max(str(nums[j]))
                if maxdigit==maxdigit2:
                    temp=max(temp,nums[i]+nums[j])
        return -1 if temp==0 else temp  

or  
class Solution:
    def maxSum(self, nums: List[int]) -> int:
        max_by_digit = defaultdict(int)
        max_sum = -1

        for num in nums:
            digit = max(str(num))

            if digit in max_by_digit:
                max_sum = max(max_sum, max_by_digit[digit] + num)

            max_by_digit[digit] = max(max_by_digit[digit], num)

        return max_sum         
*******************************************************       
Problem statement
You have been given ‘K’ different arrays/lists, which are sorted individually (in ascending order). You need to merge all the given arrays/list such that the output array/list should be sorted in ascending order 
Sample Input 1:
1
2
3 
3 5 9 
4 
1 2 3 8   
Sample Output 1:
1 2 3 3 5 8 9 
Explanation of Sample Input 1:
After merging the two given arrays/lists [3, 5, 9] and [ 1, 2, 3, 8], the output sorted array will be [1, 2, 3, 3, 5, 8, 9].
Sample Input 2:
1
4
3
1 5 9
2
45 90
5
2 6 78 100 234
1
0
Sample Output 2:
0 1 2 5 6 9 45 78 90 100 234
Explanation of Sample Input 2 :
After merging the given arrays/lists [1, 5, 9], [45, 90], [2, 6, 78, 100, 234] and [0], the output sorted array will be [0, 1, 2, 5, 6, 9, 45, 78, 90, 100, 234].
***************
import heapq

def mergeKSortedArrays(kArrays, k: int):
    # kArrays is a list of 'k' lists.
    # Return a list.
    minheap = []
    result = []

    # Push the first element of each array into the heap
    for i in range(k):
        if kArrays[i]:  # Check if the array is not empty
            heapq.heappush(minheap, (kArrays[i][0], i, 0))  # (value, array index, element index)

    # Extract elements from the heap and push the next element of the same array
    while minheap:
        val, arr_idx, elem_idx = heapq.heappop(minheap)
        result.append(val)

        # If the array has more elements, push the next element into the heap
        if elem_idx + 1 < len(kArrays[arr_idx]):
            next_val = kArrays[arr_idx][elem_idx + 1]
            heapq.heappush(minheap, (next_val, arr_idx, elem_idx + 1))

    return result
***********************************************************************************************************
Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.
Given an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.
Example 1:

Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3
Output: true
Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]
Example 2:

Input: hand = [1,2,3,4,5], groupSize = 4
Output: false
Explanation: Alice's hand can not be rearranged into groups of 4.
******************************************
 class Solution:
    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        if len(hand)%groupSize!=0:
            return False
        count=Counter(hand)
        sorted_keys=sorted(count.keys())
        for key in sorted_keys:
            if count[key]>0:
                start_count=count[key]
                for i in range(key,key+groupSize):
                    if count[i]<start_count:
                        return False
                    count[i]-=start_count

        return True
 *******************************************************************************************************************
       
