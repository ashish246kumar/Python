Note->if in the question it is given dividing a graph into two part or gruping a graph into tw part then it is a concept of bipartite graph.
bipartite graph->adjacent  node should not be of same color. and with only two color we can color the graph. if there is a cycle in graph and if it is f ecven length then
it must be of bipartite graph and if it is of odd length then then it is not.

DSU
waise set jiska intersectin null ho unk disjoint set khete hai malab koi chij cmmon nhi hai
operation
combine two given set-->union
Tell if two member belong to same set or not---->find


	                         Bellman-Ford	                                             Dijkstra
Type of Graph	Works for graphs with negative weights and positive weights	Works only for graphs with non-negative weights
elaxation Process	Repeats V - 1 times for all edges	                Uses a priority queue (min-heap) for selecting the minimum distance node
Cycle Detection	      Can detect negative weight cycles	                         Cannot detect negative weight cycles
Use Case	When negative edges exist (e.g., currency exchange, road networks with toll refunds)	When the graph has only positive weights (e.g., routing protocols, navigation systems)



Feature	                         Floyd-Warshall	                                      Bellman-Ford	                                                    Dijkstra
Type of Problem	           All-pairs shortest path	                            Single-source shortest path	                                       Single-source shortest path
Handles Negative Weights?	✅ Yes (but no negative cycles)			   ✅ Yes (detects negative cycles)	                                ❌ No
Handles Negative Cycles?	❌ No (gives incorrect results)			  ✅ Yes (detects them)							❌ No
Graph Type	              Works on dense graphs (adjacency matrix)	          Works for sparse graphs (list of edges)	                       Works best for graphs with non-negative weights
Time Complexity	                   O(V³)	                                          O(V × E)	                                              O((V + E) log V) with a priority queue
Best Use Case	           When all-pairs shortest paths are needed	         When the graph has negative weights	                              When the graph has only positive weights
Algorithm Type	             Dynamic Programming	                         Dynamic Programming	                                                   Greedy Algorithm
Data Structure Used	   2D adjacency matrix	                                    1D distance array	                                                Priority queue (min-heap)
*****************
graph
directed graph and undirected graph
tree is also a graph
cycles in graph
degree in graph(indegree,outdegree)
minimum spanning tree

graph representation
adjacency matrix

undirected graph is symmetric on a diagonal  in case of adjacency matrix(v*v)->v stand for vertex
   
Ajacency list



# Create an adjacency list using a dictionary
graph = {}

# Helper function to add an edge to the adjacency list
def add_edge(graph, src, dest):
    if src not in graph:
        graph[src] = []  # Add the source node if not present
    if dest not in graph:
        graph[dest] = []  # Add the destination node if not present
    graph[src].append(dest)  # Add the destination to the source's adjacency list

# Add edges to the graph
add_edge(graph, 0, 1)
add_edge(graph, 0, 2)
add_edge(graph, 1, 2)
add_edge(graph, 2, 3)
add_edge(graph, 3, 3)

# Print the adjacency list
for node, neighbors in graph.items():
    print(f"{node} -> {neighbors}")

0 -> [1, 2]
1 -> [2]
2 -> [3]
3 -> [3]


Let's go through each call to add_edge:
add_edge(graph, 0, 1):
src = 0, dest = 1.
0 is not in graph, so graph[0] = [].
1 is not in graph, so graph[1] = [].
Append 1 to graph[0].
Result: graph = {0: [1], 1: []}.
add_edge(graph, 0, 2):
src = 0, dest = 2.
0 is already in graph.
2 is not in graph, so graph[2] = [].
Append 2 to graph[0].
Result: graph = {0: [1, 2], 1: [], 2: []}.
add_edge(graph, 1, 2):
src = 1, dest = 2.
1 is already in graph.
2 is already in graph.
Append 2 to graph[1].
Result: graph = {0: [1, 2], 1: [2], 2: []}.
add_edge(graph, 2, 3):
src = 2, dest = 3.
2 is already in graph.
3 is not in graph, so graph[3] = [].
Append 3 to graph[2].
Result: graph = {0: [1, 2], 1: [2], 2: [3], 3: []}.
add_edge(graph, 3, 3):
src = 3, dest = 3.
3 is already in graph.
Append 3 to graph[3].
Result: graph = {0: [1, 2], 1: [2], 2: [3], 3: [3]}.
****************************************************************************************
Is there any way we can find that it is a graph question
jis entity ki bat ho rahi hai woh numbred hogi most of times
ex->courses de rakha hai -->n
they are numbred 0 to (n-1)
relation ki bat kar rhi ho ->hinting toward edge of the graph
directly puchuega topic se
***********
from collections import defaultdict
adj = defaultdict(list)
prerequisites = [[1, 0], [2, 0], [3, 1], [3, 2]]
for vec in prerequisites:
    u = vec[0]  # Source node
    v = vec[1]  # Destination node
    adj[u].append(v)  # Add the edge to the adjacency list
for node, neighbors in adj.items():
    print(f"{node} -> {neighbors}")

******************************************************************************************************
Travesal in graph
*******
dfs and bfs
*********
from collections import defaultdict

class Solution:
    
    #Function to return a list containing the DFS traversal of the graph.
    def dfsOfGraph(self, adj):
        # code here
        adjlist=defaultdict(list)
        for i in range(len(adj)):
            for j in range(len(adj[i])):
                adjlist[i].append(adj[i][j])
                
        
        def dfs(adjlist,visited,u):
            visited[u]=True
            ans.append(u)
            for v in adjlist[u]:
                if not visited[v]:
                    dfs(adjlist,visited,v)
            
        
        ans=[]
        visited=[False]*len(adjlist)
        dfs(adjlist,visited,0)
        return ans
***********************************

in dfs traversal the arrow is moving in this way
-> -> -> -> ->
******************************************************************************
bfs is used in shortest path
***********
from collections import defaultdict,deque
from typing import List

class Solution:
    # Function to return Breadth First Traversal of given graph.
    def bfsOfGraph(self, adj: List[List[int]]) -> List[int]:
        adjlist=defaultdict(list)
        for i in range(len(adj)):
            for j in range(len(adj[i])):
                adjlist[i].append(adj[i][j])
                
        
        def bfs(adjlist,visited,u):
            queue=deque()
            queue.append(u)
            visited[u]=True
            
            ans.append(u)
            while(queue):
                u=queue.popleft()
                
                for v in adjlist[u]:
                    if not visited[v]:
                        queue.append(v)
                        visited[v]=True
                        ans.append(v)
                
            
        
        ans=[]
        visited=[False]*len(adj)
        bfs(adjlist,visited,0)
        return ans
***************************************************
GFG
Cycle in a undirected graph using dfs
**********************
from typing import List
from collections import defaultdict
class Solution:
    #Function to detect cycle in an undirected graph.
	def isCycle(self, V: int, adj: List[List[int]]) -> bool:
	    visited=[False]*len(adj)
	    def is_cycle_dfs(adj,visited,u,parent):
	        visited[u]=True
	        for v in adj[u]:
	            if v==parent:
	                continue
	            if visited[v]==True:
	                return True
	            if is_cycle_dfs(adj,visited,v,u):
	                return True
	        return False       
	                
	        
	    for i in range(V):
	        if(not visited[i]):
	            if(is_cycle_dfs(adj,visited,i,-1)):
	                return True
***************************************************************************************************************************************
GFG
Cycle in a undirected graph using bfs
***************************
from typing import List
from collections import defaultdict,deque
class Solution:
    #Function to detect cycle in an undirected graph.
	def isCycle(self, V: int, adj: List[List[int]]) -> bool:
	    visited=[False]*len(adj)
	    def is_cycle_bfs(adj,visited,u):
	        q=deque()
	        q.append((u,-1))
	        visited[u]=True
	        while(q):
	            source,parent=q.popleft()
	            for v in adj[source]:
	                if visited[v]==False:
	                    visited[v]=True
	                    q.append((v,source))
	                elif parent!=v:
	                    return True
	        return False            
	                    
	                
	           
	                
	        
	    for i in range(V):
	        if(visited[i]==False):
	            if(is_cycle_bfs(adj,visited,i)):
	                return True
	    return False
**********************************************
Detect a cycle in a directed graph
********************************
from typing import List

class Solution:
    
    #Function to detect cycle in a directed graph.
    def isCyclic(self, V : int , adj : List[List[int]]) -> bool :
        # code here
        visited=[False]*V
        inRecursion=[False]*V
        def detectCycle(visited,inRecursion,adj,u):
            visited[u]=True
            inRecursion[u]=True
            for v in adj[u]:
                if visited[v]==False and detectCycle(visited,inRecursion,adj,v):
                    return True
                elif(visited[v]==True and inRecursion[v]==True):
                    return True
                    
            inRecursion[u]=False
            return False
                    
                    
        for i in range(V):
            if visited[i]==False:
                if detectCycle(visited,inRecursion,adj,i):
                    return True
        return False
 ******************************************************************************
GRAPH
Topological sort is in directed Acyclic graph---dfs

class Solution:
    
    #Function to return list containing vertices in Topological order.
    def topologicalSort(self,adj):
        visited=[False]*len(adj)
        stack=[]
        def dfs(visited,adj,u):
            visited[u]=True
            for v in adj[u]:
                if visited[v]==False:
                    visited[v]=True
                    dfs(visited,adj,v)
                    
            stack.append(u)        
        for i in range(len(adj)):
            if visited[i]==False:
                
                dfs(visited,adj,i)
        result=[]
        while(stack):
            result.append(stack.pop())
          
        return result  

***********************************************************************************************
                                                DEBUG
******************************************************************************************************
*********
0->1,2
1->3
2->3
3
visited=[False,False,False,False]
stack=[]
for i=0 to 4
i=0
if visited[0]==False
dfs(visited,adj,0)
********
1)
dfs(visited,adj,0)
visited[0]=True
for v in adj[0]
if visited[1]==False
visited[1]=True
dfs(visited,adj,1)
after 2)->1 completion
if visited[2]==False
visited[2]=True
dfs(visited,adj,2)
after 4)->1 completion
stack.append(0)

********
2)->1
dfs(visited,adj,1)
visited[1]=True
for v in adj[1]
if visited[3]==False
visited[3]=True
dfs(visited,adj,3)
after 3)->2  completion
stack.append(1)


**********
3)->2
dfs(visited,adj,3)
visited[3]=True
for v in adj[3]
stack.append(3)
*********
4)->1
dfs(visited,adj,2)
visited[2]=True
for v in adj[2]
if visited[3]==True
stack.append(2)
*********
[3,1,2,0]


*********************************************************************************
GRAPH
Topological sort is in directed Acyclic graph----->bfs| kahns algorithm

from collections import deque

class Solution:
    
    #Function to return list containing vertices in Topological order.
    def topologicalSort(self,adj):
        indegree=[0]*len(adj)
        queue=deque()
        for u in range(len(adj)):
           for v in adj[u]:
               indegree[v]=indegree[v]+1
        for i in range(len(indegree)):
            if(indegree[i]==0):
                queue.append(i)
        result=[] 
        while(queue):
            u=queue.popleft()
            result.append(u)
            for v in adj[u]:
                indegree[v]=indegree[v]-1
                if indegree[v]==0:
                    queue.append(v) 
        # print(result)            
        return result       



******************************************************************************************************
Detect cycle in a directed graph using------ bfs
I have used here topological sort concept here since in topological sort graph should be directed and acyclic. if he graph is directed and cyclic then it must be not give the 
topological sort
def isCyclic(self, V : int , adj : List[List[int]]) -> bool :
        # code here
        indegree=[0]*V
        queue=deque()
        count=0
        for u in range(V):
            for v in adj[u]:
                indegree[v]=indegree[v]+1
                
        for i in range(V):
            if indegree[i]==0:
                queue.append(i)
                count=count+1
                
        while(queue):
            u=queue.popleft()
            for v in adj[u]:
                indegree[v]=indegree[v]-1
                if indegree[v]==0:
                    count=count+1
                    queue.append(v)
        if count==V:
            return False
        return True  
*****************************************************************************************************************************************************
algrithm of find method in DSU
**********
int find(i,parent):
    if parent[i]==i:
        return i
  return find(parent[i],i)
************
void union(int x,int y, parent):
     int x_parent=find(x_parent)
     int y_parent=find(y_parent)
     if x_parent!=y_parent:
        parent[x_parent]=y_parent
********************
path compression
improved version  that is every time not need to goto the parent

int find(i,parent):
    if parent[i]==i:
        return i
  return parent[i]=find(parent[i],i)
**************************************************
detecct a cycle through  DSU
***********************************
Given an undirected graph with V vertices labelled from 0 to V-1 and E edges, check whether the graph contains any cycle or not. The Graph is represented as an adjacency list, where adj[i] contains all the vertices that are directly connected to vertex i.

NOTE: The adjacency list represents undirected edges, meaning that if there is an edge between vertex i and vertex j, both j will be adj[i] and i will be in adj[j].

Examples:

Input: adj = [[1], [0,2,4], [1,3], [2,4], [1,3]] 
Output: 1

class Solution:
    #Function to detect cycle in an undirected graph.
	def isCycle(self, V: int, adj: List[List[int]]) -> bool:
	    rank=[0]*V
	    parent=[i for i in range(V)]
	    def find(u):
	        if parent[u]==u:
	            return u
	        parent[u]=find(parent[u])
	        return parent[u]
	    def union(x,y):
	       x_parent=find(x)
	       y_parent=find(y)
	       if rank[x_parent]>rank[y_parent]:
	           parent[y_parent]=x_parent
	       elif  rank[x_parent]<rank[y_parent]:
	           parent[x_parent]=y_parent
	       else:
	           parent[x_parent]=y_parent
	           rank[y_parent]=rank[y_parent]+1
	           
        for u in range(V):
            for v in adj[u]:
                if u<v:
                    if find(u)==find(v):
                       return True
                    union(u,v) 
                   
        return False;   

*******************************************************************************************************************************************************
dijkstra  code
***************************************
import heapq
import sys
class Solution:
    # Function to find the shortest distance of all the vertices
    # from the source vertex src.
    def dijkstra(self, adj: List[List[Tuple[int, int]]], src: int) -> List[int]:
        
        V=len(adj)
        pq=[]
        result=[sys.maxsize]*V
        result[src]=0
        heapq.heappush(pq,(0,src))
        while(pq):
            d,node=heapq.heappop(pq)
            for v in adj[node]:
                adjNode=v[0]
                dist=v[1]
                if d+dist<result[adjNode]:
                    result[adjNode] = d + dist
                    heapq.heappush(pq,(d+dist,adjNode))
        return result        
****************************************************************
Shortest Path in Weighted undirected graph
Through dijkstra
*****************************************************************************************************************************************************************
Input: n = 5, m= 6, edges = [[1, 2, 2], [2, 5, 5], [2, 3, 4], [1, 4, 1], [4, 3, 3], [3, 5, 1]]
Explanation: Shortest path from 1 to n is by the path 1 4 3 5 whose weight is 5. 









from typing import List
from collections import defaultdict
import heapq
import sys
class Solution:
    def shortestPath(self,n:int, m:int, edges:List[List[int]] )->List[int]:
        pq=[]
        result=[sys.maxsize]*(n+1)
        parent=[i for i in range(n+1)]
        adj=defaultdict(list)
        # code here
        for v in edges:
            s=v[0]
            dest=v[1]
            d=v[2]
            adj[s].append((dest,d))
            adj[dest].append((s,d))

            
        
        heapq.heappush(pq,(0,1))
        result[1]=0
        while(pq):
            d,node=heapq.heappop(pq)
            for v in adj[node]:
                adjNode,dist=v
                if d+dist<result[adjNode]:
                    result[adjNode]=d+dist
                    heapq.heappush(pq,(d+dist,adjNode))
                    parent[adjNode]=node
                    
        
        path=[]
        
        if result[n]==sys.maxsize:
            return [-1]
            
        node=n
        while(parent[node]!=node):
            
            path.append(node)
            node=parent[node]
        path.append(1) 
        path.reverse()
        return path

************************************************************************************************
Bellman-Ford
Given a weighted and directed graph of v vertices and edges, Find the shortest distance of all the vertex's from the source vertex, src and return a list of integers where the ith integer denotes the distance of the ith node from the source node. If a vertices can't be reach from the s then mark the distance as 10^8.
Note: If there exist a path to a negative weighted cycle from the source node then return {-1}.
Input: edges = [[0,1,9]], src = 0

Output: [0, 9]
Explanation: Shortest distance of all nodes from source is printed.
Input: edges = [[0,1,5], [1,0,3], [1,2,-1], [2,0,1]], src = 2

Output: [1, 6, 0]
Explanation: For nodes 2 to 0, we can follow the path: 2-0. This has a distance of 1. For nodes 2 to 1, we cam follow the path: 2-0-1, which has a distance of 1+5 = 6,




class Solution:
    '''
    Function to implement Bellman Ford
    V: nodes in graph
    edges: adjacency list for the graph
    src: source vertex
    '''
    def bellmanFord(self, V, edges, src):
        
        #code here
        dist=[int(1e8)]*V
        dist[src]=0
        for i in range(1,V):
            for edge in edges:
                u,v,wt=edge[0],edge[1],edge[2]
                if dist[u]!=int(1e8) and dist[u]+wt<dist[v]:
                    dist[v]=dist[u]+wt
        
//Now detect negative cycle

        for edge in edges:
            u,v,wt=edge[0],edge[1],edge[2]
            if dist[u]!=int(1e8) and dist[u]+wt<dist[v]:
                return [-1]            
        return dist   
********************************************************************************************************************************************************
                                                                       DEBUG
***************************************************************************************************************************************************
Input: edges = [[0,1,5], [1,0,3], [1,2,-1], [2,0,1]], src = 0
dist=[0,inf,inf]
*****************
V=1
u=0,v=1,wt=5
dist[u]+5<dist[v]
dis[1]=dist[u]+5=0+5=5
dist=[0,5,inf]
*********
u=1,v=0,wt=3
dist[u]+3<dist[v]=8<0
******
u=1,v=2,wt=-1
dist[u]-1<dist[v]=4<inf
dis[2]=dist[u]-1=5-1=4
dist=[0,5,4]
*******
u=2,v=0,wt=1
dist[u]+1<dist[v]=5<0
***********************************************************
V=2
u=0,v=1,wt=5
dist[u]+5<dist[v]=dist[0]+5<dist[1]=5<5
**********
u=1,v=0,wt=3
dist[u]+3<dist[v]=dist[1]+3<dist[0]=8<0
*********
u=1,v=2,wt=-1
dist[u]-1<dist[v]=dist[1]-1<dist[2]=4<4

***********************
u=2,v=0,wt=1
dist[u]+1<dist[v]=dist[2]+1<dist[0]=5<4
*************************************************************************************************************************************************















