difference between module and package?
                       Module                                                                         package
                 single file with  python code                                      directory with multiple module and __init__.py
File Extension   .py file                                                           directory contaning __init__.py
Usage            Group releated code                                                 Structured organization for large code base
Example          math_operations.py                                                  'mypackage/' with __init__.py, math_operations.py, string_operation.py
import example    import math_operations                                              from mypackage  import math_operations
initilazation     not required                                                       Requires __init__.py
**************
is python compiled language or interpreted language?
python is interpreted language.That means python code is executed line by line by an interpreter at runtime . rather than being compiled into machine code beforehand like in compile language
**********
what are the benefit of using python lanuage as a tool in present scenario?
simplicity|portability|open source|strong community support|development speed|dynamic typing|Extensive library and framework like django,numpy,pandas
***********************************************************************************************************************************
what are the global protected and private attribute in python?
Global variable are the public variable defined in the global scope . to use global variable inside a function global keyword is used
protected attribute are marked with single _underscore while they can still be accessed and modified from outside the class responsible developer should avoid doing so
private variable are marked with double underscore (__ansh) . these can not be modified or accessed directly from outside the class and any such event will result an attribute error
*****************************************************************************************************************************************
what is pandas
pandas is open source python library which support data strcture for data  based operation associated with data analyzing and data manupulation . pandas with reacch set of feature fits in every role of data operation
whether it is related to implementing a diffefrent algo or solving complex problem
**************************************************************************************************************************
How exception handling is done in python
The main keyword for handling exception are try, except, finnaly .
*******************************************************************************************************************************
what is the use of self in python
self is used to represent instance of the class. with this keyword you can access the attribute and method of class in python binding the attribute with provided argument

***************************************************************************************************************************
How is memory management done in Python?
python manages memory using a private heap space where all objects and datastrcture stored . Programmers can not directly access this private heap . it is managed by python inter
preter. Aditionally python has built in grabage collector that automatically recycles unused memory , freeing it up and making it available for future use
*************************************************************************************************************************************************************
How to delete a file using Python?
we can delete a file using python by the following approach 
os.remove(),os.unlink()
**********************************************************************************************************************************
Which sorting technique is used by sort() and sorted() functions of python?
python uses Tim sort algorithm for sortig which is stable sorting method with worst case time complexity of O(NlogN). Time sort is a hybrid algorithm derived from merged 
sort and insertion sort designed to perform efficienty on various type of real data
***************************************************
Differentiate between List and Tuple?
list-> syntax->[],mutability->mutable,Modification-> can change, add,remove, methods->append(),remove(), Access->indexing, usage-> mutuable collection , memory efficiecy->
less efficient, hashability-> not hashable
tuple-> syntax->(),mutability->Immutable,Modification-> can not change, methods-count(), index(), Access->[index], usage->constannt data , memory efficiecy->
more efficient, hashability->  hashable
*******************************************************************************************************************************************************
What is slicing in Python?
python slicig is a operation used to extract a portion of the string or list. by  specifying start, end and step you can determine the exact segment to extract
slicing a list result in a new list created from specified portion of the original list

***************************************************************************************
8. How is multithreading achieved in Python?
Multithreading in python is achieved using the threadig module which enable the concurrent execution of multiple thread within a single process. Each thread can run its own code
and perform task simoltaneously
**************************************************************************************************
‘#’ is used to comment on everything that comes after on the line
***********
Mutable data types can be edited i.e., they can change at runtime. Eg – List, Dictionary, etc.
Immutable data types can not be edited i.e., they can not change at runtime. Eg – String, Tuple, etc.
*************************************************************
The set is unordered collection of unique items that is iterable and mutable. A dictionary in Python is an ordered collection of data values, 
used to store data values like a map.
 *******************************************************************************************
List comprehension is a syntax construction to ease the creation of a list based on existing iterable.
For Example:
my_list = [i for i in range(1, 10)]
***************************************************************************
## Lambda
A lambda function is an anonymous function. This function can have any number of parameters but, can have just one statement. For Example:
a = lambda x, y : x*y
print(a(7, 19))
**********************************************************************************
. What is a pass in Python?
Pass means performing no operation or in other words, it is a placeholder in the compound statement, where there should be a blank left and nothing has to be written there.
**********************
15. Can we Pass a function as an argument in Python?

Yes, Several arguments can be passed to a function, including objects, variables (of the same or distinct data types), and functions
 Higher-order functions are functions that can take other functions as arguments.

*********************************************************************************************************************************************
19. What is docstring in Python?
documentation strings (or docstrings) provide a convenient way of associating documentation with Python modules, functions, classes, and methods.


Declaring Docstrings: The docstrings are declared using ”’triple single quotes”’ or “””triple double quotes””” just below the class, method, or function declaration.
 All functions should have a docstring
Accessing Docstrings: The docstrings can be accessed using the __doc__ method of the object or using the help function
*********************************************************************************************************************************************************
Dictionary Comprehension? 
For Example: my_dict = {i:i+7 for i in range(1, 10)}
*******************************************
24. What is the difference between xrange and range functions?

range() and xrange() are two functions that could be used to iterate a certain number of times in for loops in Python. 

In Python 3, there is no xrange, but the range function behaves like xrange
**************************************************************************************

Differentiate between List and Tuple?

List

Lists are Mutable datatype.
Lists consume more memory
The list is better for performing operations, such as insertion and deletion.
The implication of iterations is Time-consuming
Tuple

Tuples are Immutable datatype.
Tuple consumes less memory as compared to the list
A Tuple data type is appropriate for accessing the elements
The implication of iterations is comparatively Faster
********************************************************************************************************************************************************
how do you debug a Python program?
By using this command we can debug a Python program:

$ python -m pdb python-script.py
**************************
34. Does Python supports multiple Inheritance?
Python does support multiple inheritances, unlike Java. Multiple inheritances mean that a class can be derived from more than one parent class.

*************************************************************
 How do you do data abstraction in Python?
Data Abstraction is providing only the required details and hides the implementation from the world. It can be achieved in Python by using interfaces and abstract classes.
from abc import ABC, abstractmethod

# Abstract base class
class Animal(ABC):
    @abstractmethod
    def sound(self):
        pass

    @abstractmethod
    def move(self):
        pass

# Subclass that implements the abstract methods
class Dog(Animal):
    def sound(self):
        return "Bark"
    
    def move(self):
        return "Run"

# Subclass that implements the abstract methods
class Bird(Animal):
    def sound(self):
        return "Chirp"
    
    def move(self):
        return "Fly"

# This will raise an error because Animal is an abstract class
# animal = Animal()  # TypeError: Can't instantiate abstract class Animal with abstract methods sound, move

# Correct usage
dog = Dog()
print(dog.sound())  # Output: Bark
print(dog.move())   # Output: Run

bird = Bird()
print(bird.sound())  # Output: Chirp
print(bird.move())   # Output: Fly

***************
38. How is memory management done in Python?
Python uses its private heap space to manage the memory. Basically, all the objects and data structures are stored in the private heap space. 
Even the programmer can not access this private space as the interpreter takes care of this space. Python also has an inbuilt garbage collector, 
which recycles all the unused memory and frees the memory and makes it available to the heap space.
********************************************************************************
48. What are Access Specifiers in Python?
Python uses the ‘_’ symbol to determine the access control for a specific data member or a member function of a class.
 A Class in Python has three types of Python access modifiers:
Public Access Modifier,Private Access Modifier,Protected Access Modifier
**************************************************************************************
51. What are Function Annotations in Python?

Function Annotation is a feature that allows you to add metadata to function parameters and return values.
 This way you can specify the input type of the function parameters and the return type of the value the function returns.

*************************************************************************************
differece between list and dict
list--> list object are created using list() function| The default order of element is always maintained| we can access the element using the index value
|placeing all the element inside the square bracket seperated by comma| List are collection of various element (Hetrogeneous)
dict-->dictionary object are created using dict() function| No gurantee of maintaning the order| we can access the element using the key| placing all the key value inside 
the curly braces
****************************************************************************************************************************
differece between apped and extend property of list?
append--> appeds() adds an element to the list | the length of the list will increase by one
extend--> extend() concatenates the first list with another list/iterable| The length of the list will increase by hoever many element were in the iterable argument
eg 
list1=[1,2,3]
list2=[4,5,6]
list1.append("AB")-->print(list1)--->[1,2,3,"AB"]-->in case append "AB" is treated as object
list2.extend("AB")-->print(list2)-->[4,5,6,"A","B"]-->
list1.append(list2)-->[1,2,3,[4,5,6]]
list1.append(list2)-->[1,2,3,4,5,6]
list1.append(4)-->[1,2,3,4]
list1.extend(4)-->it will throw error since 4 is not iterable object
*****************************************************************************************
 can we use list/tuple or list inside a tuple as a key in dictionary?
no list can not be used as a key in dictionary| tuple can be used as key in dictionary|no tuple contaning list can not be used as a key in dictionary
Dictionaries are indexed by keys.
Those Keys can be any immutable type i.e strings and numbers can always be keys. 
You can’t use lists as keys, since lists can be modified in place using index assignments
*****************************************************
Why Python Is Called As Dynamic Typed Programming  Language OR What Is Duck Typing?
Python don't have any problem even if we don't declare the type of variable. 
It states the kind of variable in the runtime of the program. 
Python also take cares of the memory management which is crucial in programming. So, Python is a dynamically typed language.
*********************************************************************
6. What If We Don't Use “With” Statement
If We Don't use "WITH" Statement, We need to close the opened file manually but using close().
In Case Of open():
file = open("hello.txt", "w")
file.write("Hello, World!")
file.close()
# Safely open the file
file = open("hello.txt", "w")
try:
    file.write("Hello, World!")
finally:
    file.close()
****
with open("hello.txt", "w") as file:
    file.write("Hello, World!")
************
 Internal functions called in "WITH" Statement

.__enter__() is called by the with statement to enter the runtime context.
.__exit__() is called when the execution leaves the with code block
****************************************************************************************************************************
  Q)What is Abstraction And How To Define Abstract Classes and Functions Using Abstraction.
An abstract base class is the common application program of the interface for a set of subclasses. 
It can be used by the third-party, which will provide the implementations such as with plugins.

Working of the Abstract Classes:
Unlike the other high-level language, Python doesn't provide the abstract class itself. We need to import the abc module, which provides the base for 
defining Abstract Base classes (ABC). The ABC works by decorating methods of the base class as abstract. It registers concrete classes as the implementation of
 the abstract base. We use the @abstractmethod decorator to define an abstract method or if we don't provide the definition to the method, it automatically
becomes the abstract method. Let's understand the following example.

Steps to Create and Use Abstract Classes:
Import the abc module.
Create a base class that inherits from ABC.
Use the @abstractmethod decorator to declare abstract methods.
Implement the abstract methods in derived (concrete) classes.


from abc import ABC, abstractmethod

# Abstract Base Class
class Plugin(ABC):
    @abstractmethod
    def execute(self):
        """Run the plugin's main functionality."""
        pass

    @abstractmethod
    def configure(self, settings):
        """Configure the plugin with specific settings."""
        pass

# Concrete Class implementing the Abstract Base Class
class VideoPlugin(Plugin):
    def execute(self):
        print("Executing Video Plugin functionality.")

    def configure(self, settings):
        print(f"Configuring Video Plugin with settings: {settings}")

# Another Concrete Class
class AudioPlugin(Plugin):
    def execute(self):
        print("Executing Audio Plugin functionality.")

    def configure(self, settings):
        print(f"Configuring Audio Plugin with settings: {settings}")


# Client Code
def run_plugin(plugin: Plugin):
    plugin.configure({"quality": "high"})
    plugin.execute()

# Test the plugins
video_plugin = VideoPlugin()
audio_plugin = AudioPlugin()

run_plugin(video_plugin)
run_plugin(audio_plugin)

*****************************************************************************************
what is PYTHON PATH?
PYTHONPATH is an environment variable in Python that specifies a list of directories the Python interpreter should add to its module search path
This allows you to import modules from directories not in Python's default locations.

export PYTHONPATH=/path/to/my/modules:/another/path

**********
Try: This block will test the exceptional error to occur.

Except: Here you can handle the error.

Else: If there is no exception then this block will be executed.

********************************************************************************************************************************
PIP
pip is the package manager for Python packages. We can use pip to install packages that do not come with Python
******************************************************
28. How to use F String and Format or Replacement Operator?
name = 'Nitin'
role = 'Python Developer'
print(f"Hello, My name is {name} and I'm {role}")
#How To Use format Operator

name = 'Nitin'
role = 'Python Developer'
print(("Hello, My name is {} and I'm {}").format(name,role))

Output:
Hello, My name is Nitin and I'm Python Developer
********************************************************************************************************************
29. How to Get List of all keys in a Dictionary?
Using List:
dct = {'A': 1, 'B': 2, 'C': 3}
all_keys = list(dct.keys())
print(all_keys)  # ['A', 'B', 'C']

Shortcut for Above Code:
dct = {'A': 1, 'B': 2, 'C': 3}
all_keys = list(dct)
print(all_keys)  # ['A', 'B', 'C']
***********************************************************************
30. Difference Between Abstraction and Encapsulation.
Abstraction------> Abstraction works on the design level.|Abstraction is implemented to hide unnecessary data and withdrawing relevant data.|


Encapsulation----->Encapsulation works on the application level.| Encapsulation is the mechanism of hiding the code and the data 
together from the outside world or misus | Encapsulation is supported using, e.g. public, private and secure 
access modification systems.
************************************************************
31. Does Python Support Multiple Inheritance. (Diamond Problem)
Yes, Python Supports Multiple Inheritance.
ultiple Inheritance In Python:


class A:
	def abc(self):
		print("a")

class B(A):
	def abc(self):
		print("b")

class C(A):
	def abc(self):
		print("c")

class D(B,C):
	pass

d = D()
d.abc()
**********************************************************************************
Empty List:
a = []

Empty Tuple:
a = ()

Empty Dict:
a = {}

Empty Set:
a = set()
*************************************************************************
33. Difference Between .py and .pyc
.py files contain the source code of a program. Whereas, .pyc file contains the bytecode of your program.
Python compiles the .py files and saves it as .pyc files , so it can reference them in subsequent invocations. 
The .pyc contain the compiled bytecode of Python source files. This code is then executed by Python's virtual machine .
**********************************************************************************************************************************
 Can You Concatenate Two Tuples. If Yes, How Is It Possible?        Since it is Immutable
How To Concatenate Two Tuple:

t1 = (1,2,3)
t2 = (7,9,10)
t1 = t1 + t2
print("After concatenation is : ", t1 )

Output:
After concatenation is :  (1, 2, 3, 7, 9, 10)



The expression t1 + t2 creates a new tuple by concatenating the elements of t1 and t2.
This new tuple is then assigned back to the variable t1.
The original t1 tuple is not modified; instead, the variable t1 now points to the new tuple created by concatenation.
The immutability of tuples means that the original t1 object remains unchanged, but since t1 is just a variable name (a reference), it can be reassigned to point to
a new object
print("ID of t1 before:", id(t1))  # ID of the original t1
t1 = t1 + t2
print("ID of t1 after:", id(t1))   # ID of the new t1
*****************************************************************
38. How To Read Multiple Values From Single Input?
By Using Split()
x = list(map(int, input("Enter a multiple value: ").split()))
print("List of Values: ", x)

x = [int(x) for x in input("Enter multiple value: ").split()]
print("Number of list is: ", x)

x = [int(x) for x in input("Enter multiple value: ").split(",")]
print("Number of list is: ", x)
**********************************************
where to use module and where to use package

Larger projects: If your application has multiple modules, group them into packages for better organization.
Hierarchical structure: When you need to group related modules into logical units or categories.

**********************************************************************************************************************************************
*
difference between class and static method and instance method

*********************************************************************************************************************************************

SQLite is a lightweight, self-contained, serverless SQL database engine that is built into Python via the sqlite3 module. 
It is widely used for local database storage and testing due to its simplicity and ease of use.

import sqlite3
Connecting to a Database
Use sqlite3.connect() to create a connection to an SQLite database.
If the database file does not exist, it will be created.
python
Copy code
conn = sqlite3.connect("example.db")  # Creates or connects to 'example.db'
*************************************************************************************
wat is supper function in python and where it is used

super is used to call parent class constructor from child class  or parent class method from child class
**
class Parent:
    def __init__(self, name):
        self.name = name

class Child(Parent):
    def __init__(self, name, age):
        super().__init__(name)  # Calls Parent's constructor
        self.age = age

# Test
child = Child("Ashish", 25)
print(child.name)  # Output: Ashish
print(child.age)   # Output: 25
**
class Parent:
    def greet(self):
        print("Hello from the Parent class!")

class Child(Parent):
    def greet(self):
        super().greet()  # Calls the parent class method
        print("Hello from the Child class!")

# Test
child = Child()
child.greet()

****************************
what is casting in python?

type of casting
implicit :
Explicit:
**************
if we want to access the keys of dictonary how i can is there any method?
yes we can using dict.keys()

**********************************************************************

In Python, a namespace is a mapping from names to objects. It's a way to organize code and avoid naming conflicts by associating unique names with specific objects
Think of a namespace as a dictionary where the keys are the names and the values are the corresponding objects (like variables, functions, classes, etc.)

Built-in Namespace: This namespace contains all the built-in functions and objects in Python, such as print(), len(), and int.
Global Namespace: This namespace contains names defined at the level of the main program.
Local Namespace: The local namespace refers to the scope inside a function or method
Enclosing Namespace: This namespace refers to variables that are in the outer function's scope, but not global. 
Namespace Resolution in Python (LEGB Rule)

*****************
what is the importance of writing __main__ method in python ?











