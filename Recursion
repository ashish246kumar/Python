String-to-integer-atoi
***********
Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.

The algorithm for myAtoi(string s) is as follows:

Whitespace: Ignore any leading whitespace (" ").
Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity if neither present.
Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.
Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.
Return the integer as the final result.

 

Example 1:

Input: s = "42"

Output: 42

Explanation:

The underlined characters are what is read in and the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)
         ^
Step 2: "42" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "42" ("42" is read in)
           ^
Example 2:

Input: s = " -042"

Output: -42

Explanation:

Step 1: "   -042" (leading whitespace is read and ignored)
            ^
Step 2: "   -042" ('-' is read, so the result should be negative)
             ^
Step 3: "   -042" ("042" is read in, leading zeros ignored in the result)
               ^
Example 3:

Input: s = "1337c0d3"

Output: 1337

Explanation:

Step 1: "1337c0d3" (no characters read because there is no leading whitespace)
         ^
Step 2: "1337c0d3" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "1337c0d3" ("1337" is read in; reading stops because the next character is a non-digit)
             ^
Example 4:

Input: s = "0-1"

Output: 0

Explanation:

Step 1: "0-1" (no characters read because there is no leading whitespace)
         ^
Step 2: "0-1" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "0-1" ("0" is read in; reading stops because the next character is a non-digit)
          ^
Example 5:

Input: s = "words and 987"
**************************************
class Solution:
    def myAtoi(self, s: str) -> int:
        INT_MAX=2**31-1
        INT_MIN=-2**31
        n=len(s)
        sign=1
        i=0
        while i<n and s[i].isspace():
            i+=1
        if i<n and s[i]=='-':
            sign=-1
            i+=1
        elif i<n and s[i]=='+':
            i+=1
        result=0    
        while i<n and s[i].isdigit():
            digit=int(s[i])
            if result>(INT_MAX-digit)//10:
                return INT_MAX if sign==1 else INT_MIN
            result=result*10+digit
            i+=1
        return  result*sign   
**************************************************************************
Implement pow(x, n), which calculates x raised to the power n (i.e., xn).
Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 
class Solution:
    def myPow(self, x: float, n: int) -> float:
        def function(base=x,exponent=abs(n)):
            if exponent==0:
                return 1
            elif exponent%2==0:
                return function(base*base,exponent//2) 
            else:
                return base*function(base*base,(exponent-1)//2) 
        f=function()
        return float(f) if n>=0 else 1/f   

************************************************************
Count Good Number

A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).
For example, "2582" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. However, "3245" is not good because 3 is at an even index but is not even.
Given an integer n, return the total number of good digit strings of length n. Since the answer may be large, return it modulo 109 + 7.
A digit string is a string consisting of digits 0 through 9 that may contain leading zeros.

 

Example 1:

Input: n = 1
Output: 5
Explanation: The good numbers of length 1 are "0", "2", "4", "6", "8".
Example 2:

Input: n = 4
Output: 400
Example 3:

Input: n = 50
Output: 564908303
 
class Solution:
    def countGoodNumbers(self, n: int) -> int:
        even=(n+1)//2
        odd=n//2
        mod=10**9+7
        return (pow(5,even,mod)*pow(4,odd,mod))%mod

    def pow(base,exponent,mod):
        if exponent%2==0:
            return pow((base*base)%mod,n//2)
        else:
            return base*pow((base*base)%mod,(n-1)//2)      
*******************************************************************************************************
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
        
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        def dfs(left,right,s):
            if len(s)==2*n:
                res.append(s)
                return
            if left<n:
                dfs(left+1,right,s+'(')   
            if right<left:
                dfs(left,right+1,s+')')
        res=[]  
        dfs(0,0,"")  
        return res       
*********************************************
Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.
Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
******* 
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:

        def findAllSubset(start,path):
            result.append(path)
            for i in range(start,len(nums)):
                findAllSubset(i+1,path+[nums[i]])
        result=[]        
        findAllSubset(0,[])
        return result    
******************************************************************
Given an integer n, return true if it is a power of three. Otherwise, return false.
An integer n is a power of three, if there exists an integer x such that n == 3x.
Example 1:

Input: n = 27
Output: true
Explanation: 27 = 33
Example 2:

Input: n = 0
Output: false
Explanation: There is no x where 3x = 0.
Example 3:

Input: n = -1
Output: false
Explanation: There is no x where 3x = (-1).
                

class Solution:
    def isPowerOfThree(self, n: int) -> bool:
       if n<0:
        return False
      
       if n==0 or n==2:
        return False 
       while n>0:
        if n>=3 and n%3!=0 or n==2:
            return False
            
        n=n//3
       return True     
******************************************************************************

