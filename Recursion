String-to-integer-atoi
***********
Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.

The algorithm for myAtoi(string s) is as follows:

Whitespace: Ignore any leading whitespace (" ").
Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity if neither present.
Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.
Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.
Return the integer as the final result.

 

Example 1:

Input: s = "42"

Output: 42

Explanation:

The underlined characters are what is read in and the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)
         ^
Step 2: "42" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "42" ("42" is read in)
           ^
Example 2:

Input: s = " -042"

Output: -42

Explanation:

Step 1: "   -042" (leading whitespace is read and ignored)
            ^
Step 2: "   -042" ('-' is read, so the result should be negative)
             ^
Step 3: "   -042" ("042" is read in, leading zeros ignored in the result)
               ^
Example 3:

Input: s = "1337c0d3"

Output: 1337

Explanation:

Step 1: "1337c0d3" (no characters read because there is no leading whitespace)
         ^
Step 2: "1337c0d3" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "1337c0d3" ("1337" is read in; reading stops because the next character is a non-digit)
             ^
Example 4:

Input: s = "0-1"

Output: 0

Explanation:

Step 1: "0-1" (no characters read because there is no leading whitespace)
         ^
Step 2: "0-1" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "0-1" ("0" is read in; reading stops because the next character is a non-digit)
          ^
Example 5:

Input: s = "words and 987"
**************************************
class Solution:
    def myAtoi(self, s: str) -> int:
        INT_MAX=2**31-1
        INT_MIN=-2**31
        n=len(s)
        sign=1
        i=0
        while i<n and s[i].isspace():
            i+=1
        if i<n and s[i]=='-':
            sign=-1
            i+=1
        elif i<n and s[i]=='+':
            i+=1
        result=0    
        while i<n and s[i].isdigit():
            digit=int(s[i])
            if result>(INT_MAX-digit)//10:
                return INT_MAX if sign==1 else INT_MIN
            result=result*10+digit
            i+=1
        return  result*sign   
**************************************************************************
Implement pow(x, n), which calculates x raised to the power n (i.e., xn).
Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 
class Solution:
    def myPow(self, x: float, n: int) -> float:
        def function(base=x,exponent=abs(n)):
            if exponent==0:
                return 1
            elif exponent%2==0:
                return function(base*base,exponent//2) 
            else:
                return base*function(base*base,(exponent-1)//2) 
        f=function()
        return float(f) if n>=0 else 1/f   

************************************************************
Count Good Number

A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).
For example, "2582" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. However, "3245" is not good because 3 is at an even index but is not even.
Given an integer n, return the total number of good digit strings of length n. Since the answer may be large, return it modulo 109 + 7.
A digit string is a string consisting of digits 0 through 9 that may contain leading zeros.

 

Example 1:

Input: n = 1
Output: 5
Explanation: The good numbers of length 1 are "0", "2", "4", "6", "8".
Example 2:

Input: n = 4
Output: 400
Example 3:

Input: n = 50
Output: 564908303
 
class Solution:
    def countGoodNumbers(self, n: int) -> int:
        even=(n+1)//2
        odd=n//2
        mod=10**9+7
        return (pow(5,even,mod)*pow(4,odd,mod))%mod

    def pow(base,exponent,mod):
        if exponent%2==0:
            return pow((base*base)%mod,n//2)
        else:
            return base*pow((base*base)%mod,(n-1)//2)      
*******************************************************************************************************
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
        
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        def dfs(left,right,s):
            if len(s)==2*n:
                res.append(s)
                return
            if left<n:
                dfs(left+1,right,s+'(')   
            if right<left:
                dfs(left,right+1,s+')')
        res=[]  
        dfs(0,0,"")  
        return res       
*********************************************
Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.
Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
******* 
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:

        def findAllSubset(start,path):
            result.append(path)
            for i in range(start,len(nums)):
                findAllSubset(i+1,path+[nums[i]])
        result=[]        
        findAllSubset(0,[])
        return result    
******************************************************************
Given an integer n, return true if it is a power of three. Otherwise, return false.
An integer n is a power of three, if there exists an integer x such that n == 3x.
Example 1:

Input: n = 27
Output: true
Explanation: 27 = 33
Example 2:

Input: n = 0
Output: false
Explanation: There is no x where 3x = 0.
Example 3:

Input: n = -1
Output: false
Explanation: There is no x where 3x = (-1).

class Solution:
    def isPowerOfThree(self, n: int) -> bool:
       if n==1:
        return True
       if n==0:
        return False
       return (n%3==0) and self.isPowerOfThree(n//3)  
           
or

class Solution:
    def isPowerOfThree(self, n: int) -> bool:
       if n<0:
        return False
      
       if n==0 or n==2:
        return False 
       while n%3==0:
        n=n//3
       return n==1  


******************************************************************************
Given an integer n, return true if it is a power of four. Otherwise, return false.
An integer n is a power of four, if there exists an integer x such that n == 4x.
Example 1:

Input: n = 16
Output: true
Example 2:

Input: n = 5
Output: false
Example 3:

Input: n = 1
Output: true

class Solution:
    def isPowerOfFour(self, n: int) -> bool:
        if n<0:
            return False
        if n==1:
            return True
        if n==0 or n==2 or n==3:
            return False
        return n%4==0 and self.isPowerOfFour(n//4)        
**************************************************************************************

The XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty.
For example, the XOR total of the array [2,5,6] is 2 XOR 5 XOR 6 = 1.
Given an array nums, return the sum of all XOR totals for every subset of nums. 
Note: Subsets with the same elements should be counted multiple times.
An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.
Example 1:
Input: nums = [1,3]
Output: 6
Explanation: The 4 subsets of [1,3] are:
- The empty subset has an XOR total of 0.
- [1] has an XOR total of 1.
- [3] has an XOR total of 3.
- [1,3] has an XOR total of 1 XOR 3 = 2.
0 + 1 + 3 + 2 = 6
Example 2:
Input: nums = [5,1,6]
Output: 28
Explanation: The 8 subsets of [5,1,6] are:
- The empty subset has an XOR total of 0.
- [5] has an XOR total of 5.
- [1] has an XOR total of 1.
- [6] has an XOR total of 6.
- [5,1] has an XOR total of 5 XOR 1 = 4.
- [5,6] has an XOR total of 5 XOR 6 = 3.
- [1,6] has an XOR total of 1 XOR 6 = 7.
- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.
0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28
Example 3:
Input: nums = [3,4,5,6,7,8]
Output: 480
Explanation: The sum of all XOR totals for every subset is 480.
 

class Solution:
    def subsetXORSum(self, nums: List[int]) -> int:
        def findAllSubset(start,l):
            nonlocal sum1
            if len(l)!=0:
                sum1+=reduce(operator.xor,l)
            for i in range(start,len(nums)):
                findAllSubset(i+1,l+[nums[i]])
        sum1=0        
        findAllSubset(0,[])
        return sum1
*************************************************************
Combination Sum
Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the 
frequency of at least one of the chosen numbers is different.
The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.
Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []

class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        def findCombinationSumList(start,result,sum1):
            if sum1==target:
                ans.append(result)
            if  sum1>target:
                return
            for i in range(start,len(candidates)):
                findCombinationSumList(i,result+[candidates[i]],sum1+candidates[i])
        ans=[]
        findCombinationSumList(0,[],0)
        return ans        
*********************************************************************************************
Combination-sum-ii
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 
*****
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        def findCombinationSumList(start,result,sum1):
            if sum1==target:
               
                ans.append(result)
            if  sum1>target:
                return
            for i in range(start,len(candidates)):
                if i>start and candidates[i]==candidates[i-1]:
                    continue
                findCombinationSumList(i+1,result+[candidates[i]],sum1+candidates[i])
        candidates.sort()        
        ans=[]
        findCombinationSumList(0,[],0)
        return ans
        
************************************************************************debug*****************************************************************************************************
findCombinationSumList(0, [], 0)
for i in range(0 to 7)
    findCombinationSumList(1, [1], 1)  # Pick candidates[0] = 1
*************************************
findCombinationSumList(1, [1], 1)
for i in range(1 to 7)
    findCombinationSumList(2, [1, 1], 2)  # Pick candidates[1] = 1
-------------------------------------
findCombinationSumList(2, [1, 1], 2)
for i in range(2 to 7)
    findCombinationSumList(3, [1, 1, 2], 4)  # Pick candidates[2] = 2
-------------------------------------
findCombinationSumList(3, [1, 1, 2], 4)
for i in range(3 to 7)
    findCombinationSumList(4, [1, 1, 2, 5], 9)  # Pick candidates[3] = 5
    9 > target (8) --> return  # Backtrack
-------------------------------------
backtrack to findCombinationSumList(3, [1, 1, 2], 4)
for i in range(4 to 7)
    findCombinationSumList(5, [1, 1, 2, 6], 10)  # Pick candidates[4] = 6
    10 > target (8) --> return  # Backtrack
-------------------------------------
backtrack to findCombinationSumList(3, [1, 1, 2], 4)
for i in range(5 to 7)
    findCombinationSumList(6, [1, 1, 2, 7], 11)  # Pick candidates[5] = 7
    11 > target (8) --> return  # Backtrack
-------------------------------------
backtrack to findCombinationSumList(3, [1, 1, 2], 4)
for i in range(6 to 7)
    findCombinationSumList(7, [1, 1, 2, 10], 14)  # Pick candidates[6] = 10
    14 > target (8) --> return  # Backtrack
*************************************
backtrack to findCombinationSumList(2, [1, 1], 2)
for i in range(3 to 7)
    findCombinationSumList(4, [1, 1, 5], 7)  # Pick candidates[3] = 5
    7 != target (8) --> continue
-------------------------------------
backtrack to findCombinationSumList(2, [1, 1], 2)
for i in range(4 to 7)
    findCombinationSumList(5, [1, 1, 6], 8)  # Pick candidates[4] = 6
    sum == target (8) --> append [1, 1, 6] to `ans`
***************************************************************************************************************************************************
combination-sum-iii
****************
Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.
Example 1:
Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.
Example 2:
Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.
Example 3:
Input: k = 4, n = 1
Output: []
Explanation: There are no valid combinations.
Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.
*******

class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        def findCombinationSum(start,list1,sum1):
            if sum1==n and len(list1)==k:
                result.append(list1)
            if sum1>n:
                return
            for i in range(start,10):
                if i in list1:
                    continue
                findCombinationSum(i+1,list1+[i],sum1+i)
        result=[]
        findCombinationSum(1,[],0)
        return result               
***************************************************************************************************************************************************
Subsets-ii

Given an integer array nums that may contain duplicates, return all possible 
subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.
Example 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:
Input: nums = [0]
Output: [[],[0]]


class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        result_set = set() 

        def findSubset2(start, current_subset):
            result_set.add(tuple(current_subset))
            for i in range(start, len(nums)):
              
                findSubset2(i + 1, current_subset + [nums[i]])

        findSubset2(0, [])
        return [list(subset) for subset in result_set]
        
or

class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        def findSubset2(start,list1):
            result.append(list1)
            for i in range(start,len(nums)):
                if i>start and nums[i]==nums[i-1]:
                    continue
                findSubset2(i+1,list1+[nums[i]])
        result=[]
        findSubset2(0,[])
        return result 
**********************************************************************
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
Example 1:
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:
Input: digits = ""
Output: []
Example 3:
Input: digits = "2"
Output: ["a","b","c"]


class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if len(digits)==0:
            return []
        digit_to_letter={
            '2':'abc',
            '3':'def',
            '4':'ghi',
            '5':'jkl',
            '6':'mno',
            '7':'pqrs',
            '8':'tuv',
            '9':'wxyz'

        }    
        def findPossibleCombination(i,s):
            if i==len(digits):
                ans.append(s)
                return
            for ch in digit_to_letter[digits[i]]:
                findPossibleCombination(i+1,s+ch)
        ans=[]
        findPossibleCombination(0,"")  
        return ans   

**********
23
backtrack(0,"")
  for letter in digit_to_letters[digits[0]]:--> for letter in digit_to_letters[2]:-->for letter in abc:-->
   backtrack(1, a)
***********
backtrack(1,"a")
  for letter in digit_to_letters[digits[1]]:--> for letter in digit_to_letters[3]:-->for letter in def:-->
   backtrack(2, ad)
***************
backtrack(2,"ad")
   2==2-->res.append(ad)-->return
**********************************
  backtrack(1,"a")
  for letter in digit_to_letters[digits[1]]:--> for letter in digit_to_letters[3]:-->for letter in def:-->
   backtrack(2, ae)
***************
backtrack(2,"ae")
   2==2-->res.append(ae)-->return
***********
backtrack(1,"a")
  for letter in digit_to_letters[digits[1]]:--> for letter in digit_to_letters[3]:-->for letter in def:-->
   backtrack(2, af)
*******
backtrack(2,"af")
   2==2-->res.append(af)-->return
**********

backtrack(0,"")
  for letter in digit_to_letters[digits[0]]:--> for letter in digit_to_letters[2]:-->for letter in abc:-->
   backtrack(1, b)

*************************************************************************************************
 To find all possible substring of string 
class Solution:
    def partition(self, s: str) -> List[List[str]]:
        def findAllSubset(start,s1):
            if s1:
                result.append(s1)
            for j in range(start,len(s)):
                findAllSubset(j+1,s1+s[j])
        result=[]       
        findAllSubset(0,"")
        return result
     **************   
for i in range(len(s)):
            for j in range(i,len(s)):
                print(s[i:j+1])

*************************************
Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.
Example 1:
Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]
 
class Solution:
    def partition(self, s: str) -> List[List[str]]:
        def isPalindrome(sub):
            return sub==sub[::-1]
        def findAllSubset(start,l1):
            if start==len(s):
                result.append(l1[:])
                return
            for j in range(start,len(s)):
                substring=s[start:j+1]
                if isPalindrome(substring):
                    print("*****",substring)
                    l1.append(substring)
                    findAllSubset(j+1,l1)
                    l1.pop()
        result=[]       
        findAllSubset(0,[])
        return result

**********************************************************************************************************************************************************
                                                                              debug
************************************************************************************************************************************************************
aab
1)
findAllSubset(0,[])
for j in range(0,3)
j=0
subString=s[0:1]=a
isPalindrome(a)
[a]
findAllSubset(1,[a])
**************************
2)
findAllSubset(1,[a])
for j in range(0,3)
j=1
subString=s[1:2]=a
isPalindrome(a)
[a,a]
findAllSubset(2,[a,a])-->3)
[a]
****************
3)
findAllSubset(2,[a,a])
for j in range(0,3)
j=2
subString=s[2:3]=b
isPalindrome(b)
[a,a,b]
findAllSubset(3,[a,a,b])-->4)
-----backtrack
[a,a]
*********
4)
findAllSubset(3,[a,a,b])
[[a,a,b]]
return
**********
2)5)
findAllSubset(1,[a])
for j in range(0,3)
j=2
subString=s[1:3]=ab
isPalindrome(ab)->False
*********
1)6)
findAllSubset(0,[])
for j in range(0,3)
j=1
subString=s[0:2]=aa
isPalindrome(a)
[aa]
findAllSubset(2,[aa])
***************
1)6.1)
findAllSubset(2,[aa])
for j in range(0,3)
j=2
subString=s[2:3]=b
isPalindrome(b)
[aa,b]
findAllSubset(3,[aa,b])
*******
1)6.2)
findAllSubset(3,[aa,b])
[[a,a,b],[aa,b]]
return
********************
****************************************************************************************************************
    
                   

                
 
        


        
        
        


