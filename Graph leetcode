There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.
A province is a group of directly or indirectly connected cities and no other cities outside of the group.
You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.
Return the total number of provinces.
********************************************************************************************************
 Example 1:
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2
Example 2:
Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3
 class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        adjlist=defaultdict(list)
        n=len(isConnected)
        visited=[False]*n
        count=0
        def dfs(isConnected,visited,u):
            visited[i]=True
            for v in range(n):
                if visited[v]==False and isConnected[u][v]==1:
                    visited[v]=True
                    dfs(isConnected,visited,v)

      
        for i in range(n):
            if visited[i]==False:
                dfs(isConnected,visited,i)
                count=count+1
        return count        
***********************************************************************************
Course Schedule

There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

***********************
here i have done this question throgh topological sort using bfs.  if we are able to find topological sort then we are able to cmplete the course other qwise not
*********
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        indegree=[0]*numCourses
        n=len(prerequisites)
        queue=deque()
        count=0
        adj=defaultdict(list)
        for i in range(n):
            a=prerequisites[i][0]
            b=prerequisites[i][1]
            adj[b].append(a)
            indegree[a]=indegree[a]+1
        for i in range(numCourses):
            if indegree[i]==0:
                queue.append(i)
                count=count+1
        while(queue):
            u=queue.popleft()
            for v in  adj[u]:
                indegree[v]=indegree[v]-1
                if indegree[v]==0:
                    queue.append(v)
                    count=count+1
        if count==numCourses:
            return True
        return False                 
***************************************************************************************
785
Is-graph-bipartite

There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:

There are no self-edges (graph[u] does not contain u).
There are no parallel edges (graph[u] does not contain duplicate values).
If v is in graph[u], then u is in graph[v] (the graph is undirected).
The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.

Return true if and only if it is bipartite.

 

Example 1:


Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.
Example 2:


Input: graph = [[1,3],[0,2],[1,3],[0,2]]
Output: true
Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.

***************88
class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        adj=defaultdict(list)
        n=len(graph)
        color=[-1]*n
        for i in range(n):
            for j in range(len(graph[i])):
                adj[i].append(graph[i][j])
        def dfs(adj,color,currNode,currentColor):
            color[currNode]=currentColor
            for v in adj[currNode]:
                if color[currNode]==color[v]:
                    return False
                if color[v]==-1:
                    colorV=1-color[currNode] 
                    if dfs(adj,color,v,colorV)==False:
                        return False
            return True            


        for i in range(n):
            if color[i]==-1:
                if dfs(adj,color,i,1)==False:
                    return False       
        return True
                            
**************************************************************************************************************************

GRAPH-->DSU
satisfiability-of-equality-equations
**********************************************************************
You are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: "xi==yi" or "xi!=yi".Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.

Return true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.
Example 1:

Input: equations = ["a==b","b!=a"]
Output: false
Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.
There is no way to assign the variables to satisfy both equations.
Example 2:

Input: equations = ["b==a","a==b"]
Output: true
Explanation: We could assign a = 1 and b = 1 to satisfy both equations.

******************************************************************
class Solution:
    def equationsPossible(self, equations: List[str]) -> bool:
        parent=[i for i in range(26)]
        rank=[0]*26
        def find(u):
            if parent[u]==u:
                return u
            parent[u]=find(parent[u]) 
            return parent[u]
        def union(x,y):
            x_p=parent[x]
            y_p=parent[y] 
            if rank[x_p]>rank[y_p]:
                parent[y_p]=x_p
            elif rank[x_p]<rank[y_p]:
                parent[x_p]=y_p
            else:
                parent[x_p]=y_p
                rank[y_p]+=1
        for s in equations:
            x=ord(s[0])-ord('a')
            y=ord(s[3])-ord('a')
            if s[1] =='=':
                
                union(x,y)
        
        for s in equations:
            x=ord(s[0])-ord('a')
            y=ord(s[3])-ord('a')
            if s[1] =='!':
                print(find(x))
                print(find(y))
                if find(x)==find(y):
                    return False
        return True                
************************************************************************************************
**************************************************************************************************************************

GRAPH-->DSU
number-of-operations-to-make-network-connected
**************************************************************************************************************************
There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.
You are given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.
Return the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.
Example 1:
Input: n = 4, connections = [[0,1],[0,2],[1,2]]
Output: 1
Explanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.
Example 2:
Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]
Output: 2
Example 3:
Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]
Output: -1
Explanation: There are not enough cables.




class Solution:
    def makeConnected(self, n: int, connections: List[List[int]]) -> int:
        length=len(connections)
        
        if length<(n-1):
            return -1
        parent=[i for i in range(n)]    
        rank=[0]*n
        component=n
        def find(u):
            if parent[u]==u:
                return u
            parent[u]=find(parent[u]) 
            return parent[u]
        def union(x,y):
            x_p=find(x)
            y_p=find(y)
            if x_p==y_p:
                return
            if rank[x_p]>rank[y_p]:
                parent[y_p]=x_p
            elif rank[x_p]<rank[y_p]:
                parent[x_p]=y_p
            else:
                parent[x_p]=y_p
                rank[y_p]+=1
        for v in connections:
            a=v[0]
            b=v[1]
            if find(a)!=find(b):
                   component-=1
                   union(a,b)   
        return component-1             
****************************************************************************************************************************
2316   DSU
count-unreachable-pairs-of-nodes-in-an-undirected-graph
***************************************************
You are given an integer n. There is an undirected graph with n nodes, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.
Return the number of pairs of different nodes that are unreachable from each other.
Example 1:
Input: n = 3, edges = [[0,1],[0,2],[1,2]]
Output: 0
Explanation: There are no pairs of nodes that are unreachable from each other. Therefore, we return 0.
Example 2:
Input: n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]
Output: 14
Explanation: There are 14 pairs of nodes that are unreachable from each other:
[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].
Therefore, we return 14.

*****************************************************************************************************************************
class Solution:
    def countPairs(self, n: int, edges: List[List[int]]) -> int:
        parent=[i for i in range(n)]
        rank=[0]*n
        dict1={}
        def find(u):
            if parent[u]==u:
                return u
            parent[u]=find(parent[u]) 
            return parent[u]
        def union(x,y):
            x_p=find(x)
            y_p=find(y) 
            if x_p==y_p:
                return
            if rank[x_p]>rank[y_p]:
                parent[y_p]=x_p
            elif rank[x_p]<rank[y_p]:
                parent[x_p]=y_p
            else:
                parent[x_p]=y_p
                rank[y_p]+=1
        for v in edges:
            union(v[0],v[1])  
        for i in range(n):
            papa=find(i)
            dict1[papa]=dict1.get(papa,0)+1
             
          
        result=0
        remaning=n
        for key in dict1:
            size=dict1[key]
            
            result+=size*(remaning-size)
            remaning=remaning-size
        return result    
***************************************************************************************************************************************************

**************************************************************************************************************************************************
743
Network-delay-time->Throujh dijkastra
*******************************************
You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.
We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.
Example 1:
Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2
Example 2:
Input: times = [[1,2,1]], n = 2, k = 1
Output: 1
Example 3:
Input: times = [[1,2,1]], n = 2, k = 2
Output: -1
*********************

class Solution:
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
        adj=defaultdict(list)
        for v in times:
            adj[v[0]].append((v[1],v[2]))
        pq=[]
        heapq.heappush(pq,(0,k))
        result=[sys.maxsize]*(n+1)
        result[k]=0
        while(pq):
            d,node=heapq.heappop(pq)
            for v in adj[node]:
                adjNode,dist=v
                if d+dist<result[adjNode]:
                    result[adjNode]=d+dist
                    heapq.heappush(pq,(d+dist,adjNode))

        ans = -sys.maxsize - 1 
        
        for i in range(1,n+1):
            ans=max(ans,result[i])
        if ans==sys.maxsize:
            return -1
        return ans        
******************************************************************************************************************************************************
1091  BFS 
 shortest-path-in-binary-matrix:-it can be solved throgh both bfs and dijkastra 
we can solve any question of shortest path thrugh bfs if weight is same.


Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.
A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:
All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.
Example 1:
Input: grid = [[0,1],[1,0]]
Output: 2
Example 2:
Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4
Example 3:
Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1
*****************
class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        queue=deque()
        m=len(grid)
        n=len(grid[0])
        directions=[(1,1),(1,0),(0,1),(-1,-1),(-1,0),(0,-1),(-1,1),(1,-1)]
        def isSafe(x,y):
            return x>=0 and x<m and y>=0 and y<n
        if m==0 or n==0 or grid[0][0]!=0:
            return -1
        queue.append((0,0))
        step=1
        while (queue):
            N=len(queue)
            while N>0:
                N=N-1
                x,y=queue.popleft()
                if x==m-1 and y==n-1:
                    return step
                for dir in directions:
                    a,b=dir
                    x_=x+a
                    y_=y+b
                    if isSafe(x_,y_) and grid[x_][y_]==0:
                        queue.append((x_,y_))
                        grid[x_][y_]=1 
            step=step+1               
        return -1
                
********************************************************************
Example 2:
Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4    

que= (0,0)
   step=1
   m=3
   n=3
  grid[0][0]=1
*********
pop-> x,y=0,0
x_=0
   y_=1
   grid[0][1]=1
   queue=(0,1)
   step=2
*************
pop-> x,y=0,1
x_=0
y_=2
grid[0][2]=1
queue=(0,2)
****
x_=1
y_=2
grid[1][2]=1
queue=(0,2),(1,2)
step=3
****
queue=(0,2)(1,2)
pop-> x,y=0,2->can not go anywhere from here because everewhere is 1
pop-> x,y=1,2
 
x_=2
y_=2
grid[2][2]=1
queue=(2,2)
step=4
***********
pop->x,y=2,2
x_=2
y_=2
return step
*******************************************************************************************************************************************
PATH WITH MINIMUM EFFORT(dijkastra)
1631

You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.
A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.
Return the minimum effort required to travel from the top-left cell to the bottom-right cell.
Example 1:
Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.
Example 2:
Input: heights = [[1,2,3],[3,8,4],[5,3,5]]
Output: 1
Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].
Example 3:
Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
Output: 0
Explanation: This route does not require any effort



class Solution:
    def minimumEffortPath(self, heights: List[List[int]]) -> int:
        directions=[(1,0),(0,1),(-1,0),(0,-1)]
        m=len(heights)
        n=len(heights[0])
        result=[[(sys.maxsize) for j in range(n)] for i in range(m)]
        pq=[]
        heapq.heappush(pq,(0,0,0))
        result[0][0]=0
        def isSafe(x,y):
            return x>=0 and x<m and y>=0 and y<n

        while(pq):
            diff,x,y=heapq.heappop(pq)
            if x==m-1 and y==n-1:
                return diff
            for dir in directions:
                a,b=dir
                x_=x+a
                y_=y+b
                if isSafe(x_,y_):
                    maxdiff=max(diff,abs(heights[x][y]-heights[x_][y_]))
                    if result[x_][y_]>maxdiff:
                        result[x_][y_]=maxdiff
                        heapq.heappush(pq,(maxdiff,x_,y_))
        return result[m-1][n-1]                


*****************************************************************************************************************************************************************
                                                                          DRY RUN
******************************************************************************************************************************************************************
 Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
minheap=[]
result=[sys.maxsize*n for i in range m]
result[0][0]=0
minheap=[(0,0,0)]
************
pop->diff->0 and pos(0,0)-->(kha ja sakte hai)(0,1),(1,0)
(0,0)->(0,1)  abs diff=1  which is greater than diff that is 0  and result[0,1] has infinity and my diff value is 1 so I can replace it
(0,0)->(1,0)  abs diff=2  which is greater than diff that is 0
result[0,1]=1
result[1,0]=2
minheap=[(1,0,1),(2,1,0)]
**********
pop->diff->1 and pos(0,1)-->(kha ja sakte hai)(0,0),(0,2),(1,1)
(0,1)->(0,0)  abs diff=1  and diff=1 and in result[0][0]=0 which is minimum so I can not go from (0,1) to (0,0)
 (0,1)->(0,2)  abs diff=0  and diff=1  so I can go with diff=1   and result[0,2] has infinity and my diff value is 1 so I can replace it
result[0,2]=1
minheap=[(1,0,2),(2,1,0)]
 (0,1)->(1,1)  abs diff=6  and diff=1  so I can go with abs diff=6   and result[1,1] has infinity and my diff value is 6 so I can replace it
result[1,1]=6
minheap=[(1,0,2),(2,1,0),(6,1,1)]
**************************
pop->diff->1 and pos(0,2)-->(kha ja sakte hai)(0,1),(1,2)
(0,2)->(0,1)  abs diff=0  and diff=1 so I can go with diff=1 and in result[0][1]=1 which is already present so I am not going to update  so I can not go from (0,2) to (0,1)
*
(0,2)->(1,2)  abs diff=0  and diff=1  so I can go with diff=1   and result[1,2] has infinity and my diff value is 1 so I can replace it
result[1,2]=1
minheap=[(1,1,2),(2,1,0),(6,1,1)]

***********
pop->diff->1 and pos(1,2)-->(kha ja sakte hai)(0,2),(1,1),(2,2)
(1,2)->(0,2)  abs diff=0  and diff=1 so I can go with diff=1 and in result[0][2]=1 which is already present so I am not going to update  so I can not go from (1,2) to (0,2)
(1,2)->(1,1)  abs diff=6  and diff=1 so I can go with abs diff=6 and in result[1][1]=6 which is already present so I am not going to update  so I can not go from (1,2) to (1,1)
(1,2)->(2,2)  abs diff=3  and diff=1  so I can go with abs diff=3   and result[2,2] has infinity and my abs diff value is 3 so I can replace it
result[2,2]=3
minheap=[(2,1,0),(3,2,2),(6,1,1)]
**************************************
pop->diff->2 and pos(1,0)-->(kha ja sakte hai)(0,0),(2,0),(1,1)
(1,0)->(0,0)  abs diff=2  and diff=2 so I can go with diff=2 and in result[0][0]=0 which is less than diff so I am not going to update  so I can not go from (1,0) to (0,0)
*************
pop->diff->2 and pos(1,0)-->(kha ja sakte hai)(0,0),(2,0),(1,1)
(1,0)->(0,0)  abs diff=2  and diff=2 so I can go with diff=2 and in result[0][0]=0 which is less than diff so I am not going to update  so I can not go from (1,0) to (0,0)
(1,0)->(2,0)  abs diff=2  and diff=2 so I can go with diff=2 and in result[2][0]=infinity and my abs diff value is 2 so I can replace it
result[2,0]=2
minheap=[(2,2,0),(3,2,2),(6,1,1)]
(1,0)->(1,1)  abs diff=5  and diff=2 so I can go with absdiff=5 and in result[1][1]=6 and my abs diff value is 5 so I can replace it
result[1,1]=5
minheap=[(2,2,0),(3,2,2),(5,1,1),(6,1,1)]
************
pop->diff->2 and pos(2,0)-->(kha ja sakte hai)(1,0),(2,1)
(2,0)->(1,0)  abs diff=2  and diff=2 so I can go with diff=2 and in result[1][0]=2 which is already present  so I am not going to update  so I can not go from (2,0) to (1,0) 
(2,0)->(2,1)  abs diff=2  and diff=2 so I can go with diff=2 and in result[2][1]=infinity and my  diff value is 2 so I can replace it
result[2,1]=2
minheap=[(2,2,1),(3,2,2),(5,1,1),(6,1,1)]
**************
pop->diff->2 and pos(2,1)-->(kha ja sakte hai)(1,1),(2,2),(2,0)
(2,1)->(1,1)  abs diff=5  and diff=2 so I can go with absdiff=5 and in result[1][1]=5 which is same as absdiff so I am not going to update  so I can not go from (2,1) to (1,1) 
(2,1)->(2,2)  abs diff=2  and diff=2 so I can go with diff=2 and in result[2][2]=3 which is greater than diff so I am  going to update  
result[2,2]=2
minheap=[(2,2,2),(3,2,2),(5,1,1),(6,1,1)]
(2,1)->(2,0)  abs diff=2  and diff=2 so I can go with diff=2 and in result[2][0]=2 which is same as diff so I am not going to update  so I can not go from (2,1) to (2,0) 
**********
pop->diff->2 and pos(2,2)-->(kha ja sakte hai)(2,1),(1,2)
(2,2)->(1,2)  abs diff=3  and diff=2 so I can go with absdiff=3 and in result[1][2]=1 which is less than absdiff so I am not going to update  so I can not go from (2,2) to (1,2)
*******************************************************************************************************************************************************
1584
min-cost-to-connect-all-points
*********************************
You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].
The cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.
Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.
Example 1:
Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]
Output: 20
Explanation: 
We can connect the points as shown above to get the minimum cost of 20.
Notice that there is a unique path between every pair of points.
***********************************

class Solution:
    def minCostConnectPoints(self, points: List[List[int]]) -> int:
        n=len(points)
        adj=defaultdict(list)
        for i in range(n):
            for j in range(i+1,n):
                x1=points[i][0]
                y1=points[i][1]
                x2=points[j][0]
                y2=points[j][1]
                dist=abs(x1-x2)+abs(y1-y2)
                adj[i].append((j,dist))
                adj[j].append((i,dist))
        def findMinimum(adj,n):
            pq=[]
            inMST=[False]*n
            heapq.heappush(pq,(0,0))

            sum=0
            while(pq):
                wt,node=heapq.heappop(pq)
                if inMST[node]==True:
                    continue

                sum=sum+wt
                inMST[node]=True
                for v in adj[node]:
                    neighbour,neighbour_wt=v
                    if inMST[neighbour]==False:
                        
                        heapq.heappush(pq,(neighbour_wt,neighbour))
            return sum            
        
       
        return findMinimum(adj,n)
***************************************************************************************************************************************************************                    



        

