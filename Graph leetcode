There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.
A province is a group of directly or indirectly connected cities and no other cities outside of the group.
You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.
Return the total number of provinces.
********************************************************************************************************
 Example 1:
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2
Example 2:
Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3
 class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        adjlist=defaultdict(list)
        n=len(isConnected)
        visited=[False]*n
        count=0
        def dfs(isConnected,visited,u):
            visited[i]=True
            for v in range(n):
                if visited[v]==False and isConnected[u][v]==1:
                    visited[v]=True
                    dfs(isConnected,visited,v)

      
        for i in range(n):
            if visited[i]==False:
                dfs(isConnected,visited,i)
                count=count+1
        return count        
***********************************************************************************
Course Schedule

There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

***********************
here i have done this question throgh topological sort using bfs.  if we are able to find topological sort then we are able to cmplete the course other qwise not
*********
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        indegree=[0]*numCourses
        n=len(prerequisites)
        queue=deque()
        count=0
        adj=defaultdict(list)
        for i in range(n):
            a=prerequisites[i][0]
            b=prerequisites[i][1]
            adj[b].append(a)
            indegree[a]=indegree[a]+1
        for i in range(numCourses):
            if indegree[i]==0:
                queue.append(i)
                count=count+1
        while(queue):
            u=queue.popleft()
            for v in  adj[u]:
                indegree[v]=indegree[v]-1
                if indegree[v]==0:
                    queue.append(v)
                    count=count+1
        if count==numCourses:
            return True
        return False                 
***************************************************************************************
785
Is-graph-bipartite

There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:

There are no self-edges (graph[u] does not contain u).
There are no parallel edges (graph[u] does not contain duplicate values).
If v is in graph[u], then u is in graph[v] (the graph is undirected).
The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.

Return true if and only if it is bipartite.

 

Example 1:


Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.
Example 2:


Input: graph = [[1,3],[0,2],[1,3],[0,2]]
Output: true
Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.

***************88
class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        adj=defaultdict(list)
        n=len(graph)
        color=[-1]*n
        for i in range(n):
            for j in range(len(graph[i])):
                adj[i].append(graph[i][j])
        def dfs(adj,color,currNode,currentColor):
            color[currNode]=currentColor
            for v in adj[currNode]:
                if color[currNode]==color[v]:
                    return False
                if color[v]==-1:
                    colorV=1-color[currNode] 
                    if dfs(adj,color,v,colorV)==False:
                        return False
            return True            


        for i in range(n):
            if color[i]==-1:
                if dfs(adj,color,i,1)==False:
                    return False       
        return True
                            




        

        
