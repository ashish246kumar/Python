Why there is need of virtual envornment in python
virtual enviornment help us to maintain different version of project in the same machine or different project having different version  in the same machine.
virtual enviornment do this by creating isolated enviornment for a project that does not interfere with your system enviornment.
python -m venv Python_Basics_Assignment---->To create virtual enviornment
python --version
Python_Basics_Assignment) PS C:\Users\ashishkumar18\Downloads\python_project\Python_Basics_Assignment> pip freeze > requirements.txt
PS C:\Users\ashishkumar18\Downloads\python_project\Python_Basics_Assignment> Scripts/activate      -->to activate virtual env                                                                                                               

Scripts\activate:- command to activate vitual enviornment
pip freeze-->to check what package is installed in your system

************************************************************************************************************************************************************************************
slicing in python 
sequence[start:stop:step]
sequence = [0, 1, 2, 3, 4, 5]
print(sequence[1:4])  # Output: [1, 2, 3]
****
2. Omitting start or stop
sequence = [0, 1, 2, 3, 4, 5]
print(sequence[:3])  # Output: [0, 1, 2]
print(sequence[3:])  # Output: [3, 4, 5]
*****
Using step
The step parameter allows you to skip elements. If the step is 2, for example, every second element is taken.
sequence = [0, 1, 2, 3, 4, 5, 6, 7]
print(sequence[::2])  # Output: [0, 2, 4, 6]
******
Negative step (Reversing a Sequence)
sequence = [0, 1, 2, 3, 4, 5]
print(sequence[::-1])  # Output: [5, 4, 3, 2, 1, 0]
*****************************************************
pip install mypy-->
******************************************************************************************************************
In Python, using __all__ in __init__.py specifies which names should be imported when using from <module> import *.
 However, __all__ does not restrict direct imports in other ways. You can still access any function directly from the files within a module, regardless of __all__.
****************************************************************************************************************************************************
self is used to bind the actual object with the value
*******************************
class allow to create there own data type with there own attribute and method
*********************************
The constructor is defined using the __init__ method
***************
__all__ ek special list hoti hai jo control karti hai ki package se kaunse modules ya functions import honge jab hum from package import * use karte hain.
__all__ = ["module1"]
**********************************************************************************************************
What’s the difference between a class and an object? A class is a blueprint or template, 
while an object is an instance created from that template, with specific attribute values.
******************************************************************************************************************
Methods that don’t use the self parameter (work at class level)
********************************************************************************************************
– Decorator: A decorator is a higher-order function that takes another function as an argument, adds some functionality, and returns a new function. 
It allows modifying or extending behavior of functions or methods.
******************************************************************************************************************************************************
An iterable is any object in Python that can return an iterator using the iter() function. An iterator is an object that implements the __iter__() and __next__() methods.
Example of iterable lists, tuples, strings, and dictionaries.

********
It allows you to traverse through all the elements of a collection (like lists, tuples, or dictionaries) one at a time.
********
An iterator is an object that keeps state and produces the next value when you call next() on it.
my_string = "Hello"
iterator = iter(my_string)
*********************************************************************************************************************
The for loop starts by calling the iter() function on the object. This function:
Looks for the __iter__() method in the object.
Calls __iter__() and retrieves an iterator object.
If the object itself is an iterator (like in the MyRange class), it simply returns itself.
The for loop uses the next() built-in function internally, which in turn calls the __next__() method of the iterator
**********************************************************************************************************
PS C:\Users\ashishkumar18\Downloads\python_project\Python_Basics_Assignment> $env:PYTHONDONTWRITEBYTECODE=1
it will help in not creating __pycache__ file
********************************************************************************************************************
 a generator is a type of function that allows you to generate values one at a time, instead of producing all values 
at once and storing them in memory. This makes generators memory-efficient, especially when dealing with large datasets
*********************************
 Metaclass create Classes and Classes creates objects 
**********************************************************************************************************************************************************
Class as Decorator in Python
A Python class decorator is simply a class that implements the __call__ method, allowing an instance of the class to be used as a decorator.
class DoubleReturnDecorator:
    def __init__(self, func):
        self.func = func

    def __call__(self, *args, **kwargs):
        result = self.func(*args, **kwargs)
        return result * 2

@DoubleReturnDecorator
def add(a, b):
    return a + b

# Usage
print(add(3, 5))  
print(add(10, 20))
***********
step-1  DoubleReturnDecorator class is instantiated with the add function as an argument
decorator_instance = DoubleReturnDecorator(add)
The add function is replaced by the decorator_instance.
Now, whenever add is called, it triggers the __call__ method of the decorator_instance.

step-2  
Step 2: Calling add(3, 5)
The add function is now replaced by the __call__ method of DoubleReturnDecorator.
result = decorator_instance.__call__(3, 5)
Inside __call__:
self.func refers to the original add function.
The original add function is executed with the arguments (3, 5).
result = add(3, 5)  # Original function logic
The original add function calculates the sum:
return 3 + 5  # Result: 8
return 8 * 2  # Result: 16
************************************************************************************
some practical use cases from an industry perspective of class as decorator
1. Logging and Monitoring
Automatically log method calls, arguments, and execution times.
import time

class LogDecorator:
    def __init__(self, func):
        self.func = func

    def __call__(self, *args, **kwargs):
        start_time = time.time()
        result = self.func(*args, **kwargs)
        end_time = time.time()
        print(f"Method {self.func.__name__} called with {args} {kwargs}. Execution time: {end_time - start_time:.4f} seconds.")
        return result

@LogDecorator
def process_transaction(transaction_id):
    time.sleep(1)  # Simulate processing
    return f"Transaction {transaction_id} processed"

# Usage
process_transaction(12345)

2. Access Control and Security
3. Input Validation
Dynamic Feature Enabling

class ValidateInputDecorator:
    def __init__(self, func):
        self.func = func

    def __call__(self, *args, **kwargs):
        if not all(isinstance(arg, int) and arg > 0 for arg in args):
            raise ValueError("All inputs must be positive integers.")
        return self.func(*args, **kwargs)

@ValidateInputDecorator
def calculate_area(length, width):
    return length * width

# Usage
try:
    print(calculate_area(5, 10))  # Success
    print(calculate_area(-5, 10))  # ValueError
except ValueError as e:
    print(e)
************************************************************************************************************************************************************
Different type of logging in python?

# Example log messages
logging.debug("This is a debug message")
logging.info("This is an info message")
logging.warning("This is a warning message")
logging.error("This is an error message")
logging.critical("This is a critical message")
****************************************************************************************************************************************************************
logging.error(): Logs an error message but does not include the exception traceback unless exc_info=True is explicitly passed.
logging.exception(): Always logs the current exception traceback automatically (you don't need to pass exc_info=True).
**********************************************************************
from flask import Flask
import logging
app=Flask(__name__)
log_level=logging.DEBUG
log_file='app.log'
log_file_mode='a'
log_format='%(asctime)s-%(levelname)s-%(message)s'
logging.basicConfig(filename=log_file,filemode=log_file_mode)
logging.basicConfig(level=log_level,filename=log_file,filemode=log_file_mode,format=log_format)
logger=logging.getLogger()
@app.route('/')
def index():
    logger.info('This is a debug message')
    return "hello"


if __name__=='__main__':
    app.run(debug=True)

*********************************************************************************************************************************

Error Type	Description
ZeroDivisionError	Raised when a number is divided by zero.

TypeError	Occurs when an operation is performed on incompatible types.   a="2"+2

NameError	Raised when a variable or function name is not defined.

ValueError	Occurs when a function receives an argument of the right type but an invalid value.

IndexError	Raised when trying to access an index that is out of range in a sequence (e.g., list).

KeyError	Occurs when trying to access a non-existent key in a dictionary.

AttributeError	Raised when an attribute reference or assignment fails.

FileNotFoundError	Occurs when trying to open a file that does not exist.

ImportError	Raised when an import statement fails to find the specified module or name.

StopIteration	Raised when the next() function is called on an iterator that has no more items.

# Correct type (string) but invalid value for int conversion
number = int("abc")  # Raises ValueError
# Trying to access an undefined variable
print(my_variable)  # Raises NameError

*****************************************************************************************************************
what are the different type of datatype in python

Python has several built-in data types, categorized into numeric, sequence, set, mapping, boolean, and special types.

Category	Data Types
Numeric	int, float, complex
Sequence	str, list, tuple, range
Set	set, frozenset
Mapping	dict
Boolean	bool
Binary	bytes, bytearray, memoryview
Special	NoneType
*************************
Python also has reserved variables used for special purposes, such as:

__name__: The name of the script/module being executed.

__file__: The path of the script.

__doc__: The docstring of a module or class.
********************************************
what is dictionary compharision in python
dictionary comprehension is a concise way to create dictionaries throgh iteration

squares = {x: x**2 for x in range(1, 6)}
print(squares)
# Output: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

even_squares = {x: x**2 for x in range(1, 6) if x % 2 == 0}
print(even_squares)
# Output: {2: 4, 4: 16}

*****************************************
how jwt work?
Stateless: The server does not need to store session data. Everything is encoded in the token.
Compact: JWTs are small and can be easily sent via HTTP headers.
**********
 Yeh authentication aur information exchange ke liye widely used hota hai.

******

JWT (JSON Web Token) is a compact and self-contained way to transmit information between two parties (usually a client and a server) as a JSON object.
 It is widely used for authentication and information exchange . 
A JWT consists of three parts, separated by dots (.):
Header.Payload.Signature

Header: Contains metadata about the token, such as the type of token (JWT) and the signing algorithm (e.g., HMAC SHA256, RS256).
{
    "alg": "HS256",
    "typ": "JWT"
}
Payload: Contains the claims (data) you want to transmit. This could be user information, permissions, or expiration time. For example:
{
    "userId": "1234567890",
    "role": "admin",
    "iat": 1616239022
}
Signature ka kaam token ki integrity ensure karna hota hai, taaki koi token ko modify na kar sake.
Signature generate karne ka formula:
HMACSHA256(
  base64UrlEncode(header) + "." + base64UrlEncode(payload),
  secret
)
********




How JWT Works
1. Authentication
Step 1: User Login
The user provides their credentials (e.g., username and password) to the server.

Step 2: Token Creation
If the credentials are valid, the server creates a JWT. The payload includes user-specific data (like userId, role) and optional claims such as:

iat (issued at): When the token was issued.
exp (expiration): When the token will expire.

Step 3: Token Sent to Client
The server sends the signed JWT to the client (e.g., web browser, mobile app).

2. Using the Token
The client stores the JWT (usually in localStorage, sessionStorage, or an HTTP-only cookie).
For subsequent requests, the client includes the JWT in the Authorization header as:
makefile
Copy code
Authorization: Bearer <token>
3. Token Verification
Step 1: Receiving Request
The server receives the request with the JWT

Step 2: Verifying the Token
The server decodes the JWT and validates:

Signature: Checks if the signature is valid using the secret key (or public key for asymmetric algorithms like RS256).
Expiration (exp): Ensures the token hasn’t expired.
Other claims: Verifies additional claims, like issuer (iss) or audience (aud), if applicable.
Step 3: Grant Access
If the token is valid, the server processes the request and grants access based on the user’s role or permissions.

4. Token Expiration and Refresh
When the token expires (exp claim), the client needs to obtain a new token, usually via a refresh token. The refresh token is a long-lived token stored securely (often in an HTTP-only cookie). It is exchanged for a new JWT without requiring the user to log in again.







*********
