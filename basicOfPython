Why there is need of virtual envornment in python
virtual enviornment help us to maintain different version of project in the same machine or different project having different version  in the same machine.
virtual enviornment do this by creating isolated enviornment for a project that does not interfere with your system enviornment.
python -m venv Python_Basics_Assignment---->To create virtual enviornment
python --version
Python_Basics_Assignment) PS C:\Users\ashishkumar18\Downloads\python_project\Python_Basics_Assignment> pip freeze > requirements.txt
PS C:\Users\ashishkumar18\Downloads\python_project\Python_Basics_Assignment> Scripts/activate      -->to activate virtual env                                                                                                               

Scripts\activate:- command to activate vitual enviornment
pip freeze-->to check what package is installed in your system
************************************************************************************************************************************************************************************
slicing in python 
sequence[start:stop:step]
sequence = [0, 1, 2, 3, 4, 5]
print(sequence[1:4])  # Output: [1, 2, 3]
****
2. Omitting start or stop
sequence = [0, 1, 2, 3, 4, 5]
print(sequence[:3])  # Output: [0, 1, 2]
print(sequence[3:])  # Output: [3, 4, 5]
*****
Using step
The step parameter allows you to skip elements. If the step is 2, for example, every second element is taken.
sequence = [0, 1, 2, 3, 4, 5, 6, 7]
print(sequence[::2])  # Output: [0, 2, 4, 6]
******
Negative step (Reversing a Sequence)
sequence = [0, 1, 2, 3, 4, 5]
print(sequence[::-1])  # Output: [5, 4, 3, 2, 1, 0]
*****************************************************
pip install mypy-->
******************************************************************************************************************
In Python, using __all__ in __init__.py specifies which names should be imported when using from <module> import *.
 However, __all__ does not restrict direct imports in other ways. You can still access any function directly from the files within a module, regardless of __all__.
****************************************************************************************************************************************************
self is used to bind the actual object with the value
*******************************
class allow to create there own data type with there own attribute and method
*********************************
The constructor is defined using the __init__ method
**********************************************************************************************************
What’s the difference between a class and an object? A class is a blueprint or template, 
while an object is an instance created from that template, with specific attribute values.
******************************************************************************************************************
Methods that don’t use the self parameter (work at class level)
********************************************************************************************************
– Decorator: A decorator is a higher-order function that takes another function as an argument, adds some functionality, and returns a new function. 
It allows modifying or extending behavior of functions or methods.
******************************************************************************************************************************************************
An iterable is any object that can return an iterator, such as lists, tuples, strings, and dictionaries.
********
an iterator is an object that implements the iterator protocol, which consists of the methods __iter__() and __next__(). 
It allows you to traverse through all the elements of a collection (like lists, tuples, or dictionaries) one at a time.
********
An iterator is an object that keeps state and produces the next value when you call next() on it.

*********************************************************************************************************************
The for loop starts by calling the iter() function on the object. This function:
Looks for the __iter__() method in the object.
Calls __iter__() and retrieves an iterator object.
If the object itself is an iterator (like in the MyRange class), it simply returns itself.
The for loop uses the next() built-in function internally, which in turn calls the __next__() method of the iterator
**********************************************************************************************************
PS C:\Users\ashishkumar18\Downloads\python_project\Python_Basics_Assignment> $env:PYTHONDONTWRITEBYTECODE=1
it will help in not creating __pycache__ file
********************************************************************************************************************
 a generator is a type of function that allows you to generate values one at a time, instead of producing all values 
at once and storing them in memory. This makes generators memory-efficient, especially when dealing with large datasets
*********************************
 Metaclass create Classes and Classes creates objects 
**********************************************************************************************************************************************************
Class as Decorator in Python
A Python class decorator is simply a class that implements the __call__ method, allowing an instance of the class to be used as a decorator.
class DoubleReturnDecorator:
    def __init__(self, func):
        self.func = func

    def __call__(self, *args, **kwargs):
        result = self.func(*args, **kwargs)
        return result * 2

@DoubleReturnDecorator
def add(a, b):
    return a + b

# Usage
print(add(3, 5))  
print(add(10, 20))
***********
step-1  DoubleReturnDecorator class is instantiated with the add function as an argument
decorator_instance = DoubleReturnDecorator(add)
The add function is replaced by the decorator_instance.
Now, whenever add is called, it triggers the __call__ method of the decorator_instance.

step-2  
Step 2: Calling add(3, 5)
The add function is now replaced by the __call__ method of DoubleReturnDecorator.
result = decorator_instance.__call__(3, 5)
Inside __call__:
self.func refers to the original add function.
The original add function is executed with the arguments (3, 5).
result = add(3, 5)  # Original function logic
The original add function calculates the sum:
return 3 + 5  # Result: 8
return 8 * 2  # Result: 16
************************************************************************************
some practical use cases from an industry perspective of class as decorator
1. Logging and Monitoring
Automatically log method calls, arguments, and execution times.
import time

class LogDecorator:
    def __init__(self, func):
        self.func = func

    def __call__(self, *args, **kwargs):
        start_time = time.time()
        result = self.func(*args, **kwargs)
        end_time = time.time()
        print(f"Method {self.func.__name__} called with {args} {kwargs}. Execution time: {end_time - start_time:.4f} seconds.")
        return result

@LogDecorator
def process_transaction(transaction_id):
    time.sleep(1)  # Simulate processing
    return f"Transaction {transaction_id} processed"

# Usage
process_transaction(12345)

2. Access Control and Security
3. Input Validation
Dynamic Feature Enabling

class ValidateInputDecorator:
    def __init__(self, func):
        self.func = func

    def __call__(self, *args, **kwargs):
        if not all(isinstance(arg, int) and arg > 0 for arg in args):
            raise ValueError("All inputs must be positive integers.")
        return self.func(*args, **kwargs)

@ValidateInputDecorator
def calculate_area(length, width):
    return length * width

# Usage
try:
    print(calculate_area(5, 10))  # Success
    print(calculate_area(-5, 10))  # ValueError
except ValueError as e:
    print(e)
************************************************************************************************************************************************************
Different type of logging in python?

# Example log messages
logging.debug("This is a debug message")
logging.info("This is an info message")
logging.warning("This is a warning message")
logging.error("This is an error message")
logging.critical("This is a critical message")
****************************************************************************************************************************************************************
logging.error(): Logs an error message but does not include the exception traceback unless exc_info=True is explicitly passed.
logging.exception(): Always logs the current exception traceback automatically (you don't need to pass exc_info=True).




