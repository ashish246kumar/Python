Find the largest elem in list 
************
class Solution:
    def largest(self, arr : List[int]) -> int:
        # code here
        max=0;
        for i in arr:
            if i>max:
                max=i
        return max        
        **********
Or
class Solution:
    def largest(self, arr : List[int]) -> int:
        # code here
       a=max(arr)
       return a
************************************************************************************************************************************************************************************************************
  sEcond Largest element in python     
        class Solution:
    def getSecondLargest(self, arr):
        
        # Code Here
        max=-1
        sm=-1
        for i in arr:
            if i>max:
                sm=max
                max=i
            elif i>sm and i<max:
                sm=i
        return sm

or
class Solution:
    def getSecondLargest(self, arr):
        
        # Code Here
      
       lar=max(arr)
       arr2=[i for i in arr if i!=lar]
       if not arr2:
           return -1
       sl=max(arr2)
       return sl
************************************************************************************************************************************************************************************************************
check-if-array-is-sorted-and-rotated
class Solution:
    def check(self, nums: List[int]) -> bool:

        n=len(nums)
        count=0
        for i in range(n-1):
            if nums[i+1]<nums[i]:
                count=count+1
        if nums[0]<nums[-1]:
            count+=1
        return count<=1    

******************************************************************************************************************************************

Single element in sorted array
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        n=len(nums)
        if n==1:
            return nums[0]
        if nums[0]!=nums[1]:
            return nums[0]
        if nums[n-1]!=nums[n-2]:
            return nums[n-1]
        low=1
        high=n-2
       
   
        while(low<=high):
            mid=(low+high)//2
            if nums[mid]!=nums[mid-1] and nums[mid]!=nums[mid+1]:
                return nums[mid]
            if (mid%2==0 and nums[mid]==nums[mid+1]) or(mid%2==1 and nums[mid]==nums[mid-1]):
                low=mid+1  
            else:
                high=mid-1
        return -1            
*********************************************************************************************************************

