***************
Patching
Patching ka matlab hota hai kisi function, method, ya class ko runtime pe temporarily modify karna. Ye mostly testing me use hota hai,
jahan hume actual code ko touch kiye bina uska behavior change karna hota hai.
****************************
. Monkey Patching
Monkey Patching ka matlab hai runtime pe existing code ko directly modify karna. Ye permanent hota hai jab tak program chal raha hai
***************************************
Duck Typing ka matlab hai ki aap kisi object ko uski actual type se zyada uske behavior ke basis pe treat karte hain. Python is concept ko dynamically implement karta hai, jo program ko zyada flexible aur modular banaata hai.
Python ek dynamic language hai, matlab hum types ko runtime pe check karte hain, na ki compile-time pe. Yeh Duck Typing ko asaan banata hai.
class Bird:
    def fly(self):
        print("Bird is flying")

class Airplane:
    def fly(self):
        print("Airplane is flying")

def let_it_fly(flyable):
    flyable.fly()  # Hum yaha par object ka type check nahi kar rahe
                  # Bas yeh dekh rahe hain ki fly() method hai

# Creating objects
bird = Bird()
plane = Airplane()

# Let both objects "fly"
let_it_fly(bird)   # Output: Bird is flying
let_it_fly(plane)  # Output: Airplane is flying



Duck Typing Kaise Kaam Karta Hai?
Python mein, aapko explicit type declaration ya inheritance ki zarurat nahi hoti. Jab tak object ek certain method ko implement karta hai
, aap us object ko us type ka samajh sakte hain, chahe wo type uss class ka ho ya nahi.
**************************************************************************
operator overloading  :
Operator Overloading ek powerful feature hai Python ka jo polymorphism ko implement karta hai
class ComplexNumber:
    def __init__(self, r, i):
        self.real = r
        self.imaginary = i

    def __add__(self, other):
        
        return f"{self.real + other.real}+ {self.imaginary + other.imaginary}i"

    def __repr__(self):
        # String representation of the complex number
        return f"{self.real} + {self.imaginary}i"


c1 = ComplexNumber(1, 2)
c2 = ComplexNumber(4, 5)


result = c1 + c2   # This calls the __add__ method


print(result)  # Output: 5 + 7i
***********************************
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # Overloading the '>' operator using the __gt__ method
    def __gt__(self, other):
        if self.age > other.age:
            return True
        else:
            return False

# Creating Person objects
p1 = Person("Ram", 32)
p2 = Person("Shyam", 23)

# Using the overloaded '>' operator
if p1 > p2:
    print(f"{p1.name} is older than {p2.name}")
else:
    print(f"{p2.name} is older than {p1.name}")


********************************************************
Method Overriding (Runtime Polymorphism)

class Animal:
    def sound(self):
        print("Animal makes a sound")

class Dog(Animal):
    def sound(self):  # Overriding the sound method
        print("Dog barks")

class Cat(Animal):
    def sound(self):  # Overriding the sound method
        print("Cat meows")

# Instantiate objects
animal = Animal()
dog = Dog()
cat = Cat()

# Polymorphic behavior: the sound method works differently based on the object
animals = [animal, dog, cat]
for animal in animals:
    animal.sound()
********************************************************************************************
Shallow copy ka matlab hai sirf reference (‡§™‡§§‡§æ) ka copy hona, actual object ka nahi. Iska matlab hai ki
 agar aap kisi object ka shallow copy banate hain, to dono objects (original aur copied) memory mein same nested objects ko refer karenge.

import copy

# Original List (Nested List)
original_list = [[1, 2, 3], [4, 5, 6]]

# Shallow Copy
shallow_copied_list = copy.copy(original_list)

# Change original list ka ek nested element
original_list[0][1] = 99

# Output dekhein
print("Original List:", original_list)  
print("Shallow Copied List:", shallow_copied_list)  
*********************************************************************
import copy

original_list = [1, 2, 3, 4, 5]

# Shallow Copy
shallow_copied_list = copy.copy(original_list)

# Change original list ka ek element
original_list[0] = 99  

# Output
print("Original List:", original_list)
print("Shallow Copied List:", shallow_copied_list)
Original List: [99, 2, 3, 4, 5]
Shallow Copied List: [1, 2, 3, 4, 5]
Agar aap shallow copy banaoge ek simple list [1,2,3,4,5] ka, to koi farq nahi padega kyunki yeh list sirf integers ka collection hai, aur integers immutable hote hain
***************
Agar object ke andar nested mutable objects hain (jaise lists, dictionaries), to unka reference copy hota hai, na ki naya object banta hai.
Ek object me change karne se doosre object me bhi reflection hota hai, jo kabhi-kabhi unexpected behavior cause kar sakta hai.
*****************
Deep copy ka matlab hota hai poora naya object create karna, jisme nested objects bhi naye memory locations par store hote hain.

import copy

# Original List (Nested List)
original_list = [[1, 2, 3], [4, 5, 6]]

# Deep Copy
deep_copied_list = copy.deepcopy(original_list)

# Change original list ka ek nested element
original_list[0][1] = 99

# Output dekhein
print("Original List:", original_list)  
print("Deep Copied List:", deep_copied_list)  
******************************************************

Feature	Shallow Copy (‡§ä‡§™‡§∞‡•Ä ‡§ï‡•â‡§™‡•Ä)	Deep Copy (‡§ó‡§π‡§∞‡•Ä ‡§ï‡•â‡§™‡•Ä)
Memory Allocation	Sirf outer object naya banta hai	Outer aur andar ke nested objects bhi naye bante hain
Reference Sharing	Inner (nested) objects ka reference copy hota hai	Pure structure ka naya instance banta hai
Impact of Change	Ek object me change karne se dusre object me bhi change ho jata hai (agar nested object change ho raha ho)	Ek object me change ka dusre object pe koi effect nahi hota
Performance	Faster, because sirf reference copy hota hai	   Slower, because poora naya object create hota hai
Use Case	Jab nested objects change nahi honge	         Jab humein independent copy chahiye
*************************************
why tuple is more memory efficient?

Tuple ka size fixed hota hai aur ek baar create hone ke baad usme koi changes nahi ho sakte. Python internally tuple ka memory allocation optimize karta hai, jabki list me extra memory reserve hoti hai future updates ke liye.
Tuple ka size kam hai because:

List ko modify karne ki flexibility dene ke liye extra memory allocate hoti hai.
Tuple fixed hota hai, isliye extra memory reserve nahi hoti.


3. Tuple ka Memory Layout Zyada Efficient Hota Hai
Ek pointer array hota hai jo alag-alag memory locations ko point karta hai.
Koi extra memory overhead nahi hota hai tuple ke case me
4Ô∏è‚É£ Tuple me garbage collection overhead nahi hota, jo efficiency badhata hai.


*********************
what is blueprint in flask?
*********
Flask me Blueprint ek modular approach hai jo large applications ko organize aur manage karne ke liye use hoti hai
Blueprint ka use karke hum Flask application ke different parts ko alag-alag modules me divide kar sakte hain, jisse code reusable, scalable aur maintainable ho jata hai.
üîπ Scalability: Jaise-jaise application badhta hai, easily manage kar sake.

Blueprint Ke Fayde:
1Ô∏è‚É£ Multiple Developers ek saath kaam kar sakte hain bina ek dusre ke code ko touch kiye.
2Ô∏è‚É£ Modular Approach se hum alag-alag features ko modules me rakh sakte hain.
3Ô∏è‚É£ Easily Scalable - Agar naye features add karne ho to naye Blueprints bana sakte hain.

Blueprint Flask ka ek powerful feature hai jo large applications me code management ko easy banata hai.

***************************
different level of log
*********
CRITICAL	50 (Highest)	Serious error, app may crash (e.g., database failure)
ERROR	40	Error that needs attention but app still runs
WARNING	30	Potential issues (e.g., deprecated function)
INFO	20	General app events (e.g., request received)
DEBUG	10	Debugging details for developers
*************
REST API ek communication system hai jo web applications aur servers ke beech data exchange karne ke liye use hota hai. 
Yeh stateless architecture par based hota hai, jisme client aur server independent hote hain.
 Stateless Communication
Har request independent hoti hai.
Server ko pichle request ki history ya state yaad nahi rehti.
REST API me mostly JSON (JavaScript Object Notation) format ka use hota hai, kyunki yeh lightweight aur readable hota hai.
Yeh HTTP methods ka use karta hai (GET, POST, PUT, DELETE).
Yeh JSON format me data exchange karta hai.
***********************
Lambda expressions (anonymous functions) Python me ek-line functions likhne ka tareeka hai jo bina def keyword use kiye short aur powerful hoti hain.
Yeh higher-order functions ke saath use ki jati hain jaise map(), filter(), aur reduce().
***************
*************
square=lambda x:x**2
print(square(5))
powered_numbers=list(map(lambda x:x**2,numbers))
print(powered_numbers)
 *******
set1 = {1, 2, 3, 4, 5}
set2 = {3, 4, 5, 6, 7}
set(filter(lambda x:x%2==0,set1.union(set2))
*******
students = {"Ashish": 85, "Rahul": 92, "Sonia": 78}

sorted(students.items(),key=lambda x:x[1])
*********
numbers = [1, 2, 3, 4, 5]
reduce(lambda x,y:x+y,numbers)
*********
names = ["Ashish", "Rahul", "Sonia", "Ankit"]
sort on the basis of length
sorted(names,key=lambda x:len(x))
*******
data = [(1, 5), (2, 3), (3, 7), (4, 1)]
sorted(data,key=lambda x:x[1])
*******
Explain database connection in Python Flask.

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///foodapp.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
*************************
Python mein access specifiers ka concept directly nahi hota jaisa ki Java. mein hota hai (like public, private, protected).
Python mein sab kuch ek convention ke through handle kiya jata hai, jo ki "name mangling" aur "underscore convention" pe based hota hai.

*********
Public members: Agar aap kisi class ke variables ya methods ko bina kisi underscore ke define karte hain, toh wo by default public hote hain, matlab wo bahar se directly access kiye ja sakte hain
class MyClass:
    def __init__(self, name):
        self.name = name  # Public variable

    def greet(self):
        return f"Hello, {self.name}!"  # Public method

obj = MyClass("Ashish")
print(obj.name)  # Directly access the public variable
print(obj.greet())  # Directly call the public
*********
Protected members (Single underscore _):
Use protected variables when you want subclasses to access them but still signal they‚Äôre not for general use.

class MyClass:
    def __init__(self, name):
        self._name = name  # Protected variable

    def _greet(self):  # Protected method
        return f"Hello, {self._name}!"

class SubClass(MyClass):
    def show(self):
        return f"Name from subclass: {self._name}"  # Accessing protected variable in subclass

obj = SubClass("Ashish")
print(obj.show())  # Accessing protected variable in subclass
# print(obj._name)  # It's possible to access directly, but discouraged

**********************
Private members (Double underscore __): Agar aap kisi variable ya method ko double underscore (__) ke saath define karte hain, toh Python internally is member ka naam change kar deta hai
*********
The join() function in Python is a string method used to concatenate the elements of an iterable (like a list, tuple, or set)
words = ["Python", "is", "awesome"]
result = " ".join(words)
print(result)  
********
words = ["apple", "banana", "cherry"]
result = ", ".join(words)
print(result)  
*************
numbers = [1, 2, 3]
result = "-".join(map(str, numbers))  # Convert numbers to strings
print(result)
*****************
How can you identify and deal with missing values in a dataframe?  explain in hinenglish  not in hindi and not in english but in hinEnglish

print(df.isnull())  # True waha dikhega jaha value missing hai
print(df.isnull().sum())
2Ô∏è‚É£ Missing Values Remove Karna (Drop Karna)
df_cleaned = df.dropna()
print(df_cleaned)

*******
df_cleaned = df.dropna(subset=['Salary'])  # Salary me se missing value hata do
print(df_cleaned)
******
df_filled = df.fillna(0)  # Jaha NaN hai, waha 0 dal do
print(df_filled)
*******
manage.py Django framework ka ek command-line utility script hota hai jo Django projects ko manage karne aur execute karne ke liye use hota hai
1Ô∏è‚É£ Django Server Start Karna üöÄ
python manage.py runserver
2Ô∏è‚É£ New App Create Karna üèó
python manage.py startapp app_name
3Ô∏è‚É£ Database Migrations Manage Karna üóÑ
python manage.py makemigrations
python manage.py migrate
*********************************************
manage.py Django projects ka manager hai jo server run karne, database manage karne, aur superuser create karne jaise tasks perform karta hai
*************
Python me random numbers generate karne ke liye random aur numpy module ka use hota hai.
Python ka random module random number generate karne ke liye built-in functions provide karta hai.
import random

num = random.randint(1, 100)  # 1 se 100 ke beech koi random number dega
print(num)

numpy Module Ka Use
Agar large datasets ke liye random numbers chahiye toh NumPy ka numpy.random module use hota hai.
import numpy as np

num = np.random.randint(1, 100)  # 1 se 100 ke beech integer
print(num)
**********************
What does *args, **kwargs mean in Python?
Python me *args aur **kwargs ka use functions me variable-length arguments pass karne ke liye hota hai. Yeh dynamic arguments handling ka ek powerful feature hai
*args ka use multiple positional arguments pass karne ke liye hota hai. Yeh tuple ke form me arguments ko function me store karta hai.
def add_numbers(*args):
    total = sum(args)  # args ek tuple hota hai
    print("Sum:", total)

add_numbers(10, 20, 30)  # Multiple numbers pass kiye
*********
**kwargs (Variable-length Keyword Arguments)
**kwargs ka use multiple keyword arguments pass karne ke liye hota hai. Yeh dictionary ke form me arguments store karta hai.
def full_details(*args, **kwargs):
    print("Positional Arguments:", args)  # Tuple
    print("Keyword Arguments:", kwargs)  # Dictionary

full_details(10, "Python", name="Ashish", age=25)


**********************
Yes, Flask follows the MVC (Model-View-Controller) pattern, but it is not a strict implementation like some other frameworks (e.g., Django). Instead,
it provides flexibility to structure your application in an MVC-like manner

 Model (M) ‚Üí Data ko handle karta hai (Database interaction, logic, ORM).
2Ô∏è‚É£ View (V) ‚Üí UI aur templates ko manage karta hai (HTML, Jinja2 templates).
3Ô∏è‚É£ Controller (C) ‚Üí User requests ko handle karta hai, aur Model aur View ke beech coordination karta hai (Flask routes).



********
How can we check if all characters in a string are alphanumeric?
Python me isalnum() method ka use karke hum easily check kar sakte hain ki ek string ke sabhi characters alphanumeric hain ya nahi.
# Example 1: Alphanumeric string
str1 = "Hello123"
print(str1.isalnum())  # Output: True

# Example 2: String with non-alphanumeric character
str2 = "Hello 123"
print(str2.isalnum())  # Output: False

# Example 3: String with special character
str3 = "Hello@123"
print(str3.isalnum())  # Output: False
****************************************************
What are some of the most used built-in modules in Python?
math Module
Purpose: Mathematical operations (like trigonometric functions, logarithms, etc||print(math.sqrt(16))  # Output: 4.0
os Module
Purpose: Operating system dependent functionalities, file and directory management
os.mkdir('new_folder')|
re Module
Purpose: Regular expressions for pattern matching.  
*********
text = "My phone number is 9876543210"
# Find a phone number pattern
pattern = r'\d{10}'
match = re.search(pattern, text)
*********
collections Module
Purpose: Specialized container datatypes (like namedtuples, defaultdict, Counter).
dd = defaultdict(int)

************
What are the tools for debugging and performing static analysis in Python?
Purpose: Python ka built-in debugger hai jo code ko step-by-step execute karne me help karta hai, taaki aap easily bugs track kar sakein.
import pdb
pdb.set_trace()

***********
How do you convert string to lowercase in Python?
text = "Hello, World!"
# Convert string to lowercase
lowercase_text = text.lower()

print(lowercase_text)  # Output: 'hello, world!'
*************
Do you think you can call the parent class without its instance creation? 
************
class Parent:
    @staticmethod
    def greet():
        print("Hello from Parent!")

class Child(Parent):
    @staticmethod
    def greet():
        Parent.greet()  # Calling the parent class method without creating an instance
        print("Hello from Child!")

# No need to create an instance of Parent or Child
Child.greet()
***************************************************************
In what ways can parent members in a child class be accessed?
1. Using super()
class Parent:
    def __init__(self):
        self.parent_attribute = "Parent attribute"
    
    def greet(self):
        print("Hello from Parent")

class Child(Parent):
    def __init__(self):
        super().__init__()  # Calling the parent class constructor
        self.child_attribute = "Child attribute"
    
    def greet(self):
        super().greet()  # Calling the parent class method
        print("Hello from Child")

child = Child()
child.greet()
print(child.parent_attribute)  # Accessing parent attribute
**********************************************************
Why is NumPy preferred over Python lists?
NumPy ko Python lists ke comparison mein isliye prefer kiya jata hai kyunki:

Efficient Memory Usage: NumPy arrays ka memory allocation Python lists se zyada efficient hota hai. NumPy arrays compact storage use karte hain, 
jisse zyada data store karna possible hota hai bina memory waste ke.
Python lists mein har element ke liye ek extra pointer hota hai, jisse memory usage increase hota ha

Built-in Functions: NumPy mein kai useful mathematical and statistical functions hote hain jo Python lists mein nahi hote
***********************************
Built-in Functions: NumPy mein kai useful mathematical and statistical functions hote hain jo Python lists mein nahi hote. For example, mean, standard deviation,
matrix multiplication, etc.,
NumPy ke functions se bahut easily kiye ja sakte hai
************
Multidimensional Arrays: NumPy easily multidimensional arrays (matrices, tensors) ko handle kar sakta hai. 
********
How can you copy an object in Python?
a= [1, 2, 3]
copied_list =a.copy()
print(copied_list)
*********
import copy
my_dict = {'a': 1, 'b': 2}
copied_dict = copy.copy(my_dict)
print(copied_dict)
***********
What are Pickling
Pickling ek process hai jisme hum Python objects ko byte stream me convert karte hain, taaki unhe file ya network par store ya transfer kiya ja sake. Ye process pickle module ke through hota hai. 
Jab hum kisi object ko pickle karte hain, toh wo object memory se disk ya kisi aur medium par store ho jata hai.
Fir hum is object ko baad me wapas unpickle kar ke original form me restore kar sakte hain.
**********
import pickle

# Python object
data = {'name': 'Ashish', 'age': 25, 'city': 'Delhi'}

# Pickling - converting object to binary
with open('data.pkl', 'wb') as file:
    pickle.dump(data, file)

print("Data Pickled Successfully!")
***
import pickle

# Unpickling - converting binary back to Python object
with open('data.pkl', 'rb') as file:
    data = pickle.load(file)

print(data)

pickle.dump() function use hua hai object ko pickle karne ke liye.
'wb' mode ka use kiya gaya hai kyunki binary format me data store ho raha hai.
************************************************************************************
Unpickling in Python
Unpickling pickled (serialized) data ko dobara original Python object me convert karne ka process hai. 
Jab hum ek pickled file ko load karte hain, toh uska binary data wapas Python object me badal diya jata hai.

import pickle

# Unpickling - converting binary back to Python object
with open('data.pkl', 'rb') as file:
    loaded_data = pickle.load(file)

print("Unpickled Data:", loaded_data)
************************
Pickling ‚Üí Python object ko binary format me convert karna.
Unpickling ‚Üí Binary data ko wapas Python object me badalna.
*******************************************************************************************************************************************************
Type Conversion means changing the data type of a variable or value from one type to another
 Implicit Type Conversion (Automatic Conversion
x = 10        # Integer
y = 5.5       # Float

result = x + y  # Python converts int to float automatically
print(result)   # Output: 15.5
print(type(result))  # Output: <class 'float'>
************
‚úÖ 2. Explicit Type Conversion (Type Casting)
In this, users manually convert one data type to another using Python‚Äôs built-in functions.
num_str = "100"
num_int = int(num_str)
print(num_int, type(num_int))  # Output: 100 <class 'int'>
**********
onvert Tuple to List:
my_tuple = (10, 20, 30)
my_list = list(my_tuple)
print(my_list)  # O
**************
How can you remove values from an array in Python?

arr = [10, 20, 30, 40, 30]
arr.remove(30)  
print(arr)  # Output: [10, 20, 40, 30]
**********
arr = [10, 20, 30, 40]
arr.pop(2)   
print(arr)  # Output: [10, 20, 40]
******
arr = [10, 20, 30, 40, 50]
del arr[1]    
print(arr)  # Output: [10, 30, 40, 50]
*****
What is reindexing in Pandas?
Reindexing in Pandas means changing the row or column indices of a DataFrame or Series. It helps in:
Changing the order of rows/columns
Adding or removing rows/columns
Aligning data based on a new index
DataFrame.reindex(new_index, axis=0, fill_value=None)
new_index ‚Üí List of new row/column indexes
axis=0 ‚Üí Rows (default)
axis=1 ‚Üí Columns
fill_value ‚Üí Value to fill for missing data (default is NaN)
*****************
What do you think is the use of dir () function in Python?   
The dir() function in Python ka use hota hai kisi bhi object, module, ya class ke attributes aur methods ko dekhne ke liye. 
Ye basically ek list return karta hai jisme wo saare functions aur properties hote hain jo us object ke saath use kiye ja sakte hain.
‚úÖ Use Cases of dir():
üîç Kisi object ke andar kya-kya methods hain, wo dekhne ke liye.
my_list = [1, 2, 3]

print(dir(my_list))
['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']

*******************
What are literals in Python?
Literals in Python wo fixed values hote hain jo directly code me likhe jaate hain. Ye values program ke run hone ke time change nahi hoti.
Basically, literals are the constant values assigned to variables.
x = 10      # 10 is an Integer literal  
name = "Ashish"  # "Ashish" is a String literal  
pi = 3.14   # 3.14 is a Float literal  
*************
Types of Literals in Python:
1. Numeric Literals
String Literals
name = "Ashish"
greet = 'Hello!'
para = """This is a 
multi-line string."""
**********
Binary, Octal & Hexadecimal Literals

Binary ‚Üí 0b1010 (binary format)
Octal ‚Üí 0o12 (octal format)
Hexadecimal ‚Üí 0xA (hex format)
*******
Boolean Literals ‚Äì Ye True ya False hote hain.
x = True
y = False
*************
Special Literal ‚Äì Python me None ek special literal hai, jo empty ya undefined value ko dikhata hai.
data = None
*****************

**************************
Literal Collections ‚Äì Ye group of items ko store karte hain.

List ‚Üí [1, 2, 3, 4]
Tuple ‚Üí (10, 20, 30)
Dictionary ‚Üí {'name': 'Ashish', 'age': 25}
Set ‚Üí {1, 2, 3}

***************************************************************************
Python ek object-oriented aur functional programming dono ko support karne wali language hai.
‚úÖ Object-Oriented Programming (OOP):
Python mein classes aur objects ka use karke OOP concepts apply kiye ja sakte hain. Isme inheritance, encapsulation, polymorphism, aur abstraction jaise features milte hain.

******
Can you tell us if Python is object-oriented or functional programming?  
 Functional Programming:
Python mein functional programming bhi ki ja sakti hai, jisme functions ko first-class citizens ki tarah treat kiya jata hai. Isme map(), filter(), reduce()
***********************************
What rules govern local and global variables in Python?  in hinemglish
Local Variables:
Jo variables kisi function ke andar define hote hain, wo local variables hote hain.
Unka scope sirf us function ke andar hi hota hai.
****
2. Global Variables:
Jo variables function ke bahar define hote hain, wo global variables hote hain.
Ye pura program mein kahin se bhi access kiye ja sakte hain.
x = 20  # global variable

def my_func():
    print("Inside function:", x)

my_func()
print("Outside function:", x)

*************************








