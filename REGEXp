 Basic Meta Characters
Meta Character	Meaning	Example
.	Matches any single character except a newline (\n)	a.b matches acb, a1b, but not ab.|->In ab, there is no character between a and b.
^	Matches the start of a string	^abc matches abc only at the start.
$	Matches the end of a string	abc$ matches abc only at the end.
*	Matches 0 or more occurrences of the preceding element	ab*c matches ac, abc, abbc, etc.|->Pattern: (ab)* It means "match 0 or more occurrences of ab."

+	Matches 1 or more occurrences of the preceding element	ab+c matches abc, abbc, but not ac.
?	Matches 0 or 1 occurrence of the preceding element	ab?c matches ac or abc.
\	Escapes the following character, turning it into a literal	\. matches . instead of any character.|->Regex Without Escaping: 1+1=2

Matches strings like 111=2 because + means "one or more 1s."
Regex With Escaping: 1\+1=2

Matches the exact string 1+1=2, because \+ treats the + as a literal plus sign
*****************************************************
[abc]	Matches a, b, or c	"a", "b", "c"
[^abc]	Matches any character except a, b, c	"d", "e", "1", but not "a", "b", "c"
[a-z]	Matches any lowercase letter	"b", "m", "z", but not "A", "9"
[0-9]	Matches any digit	"0", "5", "9", but not "a", "B"
[a-zA-Z]	Matches any letter (lowercase or uppercase)	"a", "B", "X"
[^0-9]	Matches anything that is not a digit	"a", "!", " ", but not "1", "2"
************************************************************************************************************************************************************
{n}	Matches exactly n occurrences	a{3} matches aaa.
{n,}	Matches n or more occurrences	a{2,} matches aa, aaa, etc.
{n,m}	Matches between n and m occurrences	a{2,4} matches aa, aaa, or aaaa.
*******************************************************
search()
findAll()
******************
r"(a|b)yz"-->start with a or b
*******************************************************
import re
text='Hello, my phone number is'
result=re.findall(r'\d+',text)
result1=re.search(r'\d+',text)
print(result)
print(result1)
# []
# None
text1='Hello, my phone number is 123-456-7890'
result2=re.findall(r'\d+',text1)
result3=re.search(r'\d+',text1)
print(result2)
print(result3)
# ['123', '456', '7890']
# <re.Match object; span=(26, 29), match='123'>
pattern=r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
text3='Hello, my email is test@example.com'
result4=re.findall(pattern,text3)
print(result4)
# ['test@example.com']
pattern2=r'\s'
text3='Hello, my email is test@example.com  '
result4=re.findall(pattern2,text3)
print(result4)
# [' ', ' ', ' ', ' ', ' ', ' ']

text6='Hello, my phone number is 1-456-7890'
result6=re.findall(r'\d{2,4}+',text6)
print(result6)
# ['456', '7890']
text7='Hello, my phone number is a1-456-7890'
result7=re.findall(r'\w+\d+',text7)
print(result7)
# ['a1', '456', '7890']
****************************************************************************************************************************************************************

