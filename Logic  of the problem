*****************************************************************************************
two sum brute force approach
two loop 
i=0 
j=i+1 se
hum target-i karenge aur iss j wale for loop me search  karenge 

*********
dusra approach hum map me rakhenge value aur index value key rahega aur index 
2,7,11,15
target=9
remaning=9-7=2 kya 2 exist kar raha hai map me agar nhi toh hum i ko badha denge au 7 ko map me store kar lenge 
i=3
remaning=9-11=-2
************
if array is sorted then i will choose two pointer approach
i aur j 

i=0 se and  j=end-1 se
agar arr[i]+arr[j]=tareget toh return
agar arr[i]+arr[j]>target then j--
else i++
ye mai kyu kar pa raha kyu ki array sorted hai hum agae badhenge toh hume large element milega .aur hum agar piche badhe toh hume chota element milega
*******
Agar result me indexing maga hai toh hum sort nhi kar sakte 
agar result me element maga hai toh hum sort kar paynge array ko.
hum sort karke two pointer approach laga sakte hai

************
find no of elment jiska sum of 2 elem target ke barabar ho toh
first sort array
take two pointer
removes duplicate
******
3 sum
n1+n2+n3=0
n2+n3=-(n1)
isko hum kah sakte hai 2 element ka sum target ke barabar hai | iss trah yeh 2 sum problem ban jayga
approach
hum phela element ko n1 man lenge aur baki i=1 se n me mai  2 sum laga  doonga
************************
majority element  n//2 or n//3

brute force
map me frequency store kar lenge aur jiski frequency n//2 se Jayda hogi usko return kar dunga
*****
Boyer-Moore algo
nums=[2,2,1,1,1,2,2]
hum phela element ko man lenge n//2 se bada hai 
candidate =2
count=1
i=1
agar candiate ==arr[i] toh hum count++ kar denge
agar candidate!=arr[i-1] toh hum count-- kar denge
if count=0 ho jata hai toh hum candidate ko change kardenge aur naya candidate current element hoga
 ********
*************
find all possible subarray and find sum and check==target or not
**********
for(s=0;s<=n-1;s++)
 for(e=s;e<=n-1;e++)
 {
}
if sum==k:
  count++;
*******
it come under the concept of cumulative sum 
1,4,1,2,6  k=3
1-3=-2 is it present in the hashmap if not then i put 1->1 in map
cs=1+4=5 and 5-3=2 is it present in map if not 5->1
cs=5+1=6 and 6-3=3 not present in the map 6->1
cs=6+2=8 and 8-3=5  present in map so inc count=1 map-> 8->1
**
[1,-1] k=0
iss wale case ko handle ke liye hum map me pheele hi 0->1 dal denge
***
[1,-1,0] if 0 come as key multiple times then we inc it by 1  in value
****
Maximum Ascending Subarray Sum 
10,20,30,5,10,50
*****
brute force
sum=arr[i]
i=0 to n and  j=i+1 to n
aur ye bhi check karenge arr[i]<arr[j] then we do sum=sum+arr[j] and max=max(max,sum)
****
optimal approach
but the problem in the brute force approach is agar 30 ke bad 5 smallest hai aur hume agar ye case milta hai toh hum i=i+1 kar dete hai 
matlab hum i ko i=1 la dete hai but hume i=3 lana chaiye kayde se .
**********
Rearrange array element by sign
Brute force approach 
[3,1,-2,-5,2,-4]
ek positive array banuga aur ek negative array banuga
******
optimal approach
********
hum dekhege toh hum payenge even index par positive element store ho rha hoga aur odd index par negative
toh hum isilye 2 pointer le lenge
i=0->positive ke live
j=1->negative ke liye
if arr[k]>0
result[i]=arr[k] aur i=i+2
else{
  result[j]=arr[k]
 j=j+2
}

**************************************
Next Permutation
***************************************
{1,2,3}->
lexographically permutation of this
{1,2,3}
{1,3,2}
{2,1,3}
{2,3,1}
{3,1,2}
{3,2,1}
******************************************************************************************************************

