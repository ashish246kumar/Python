Sort character by frequency
Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.

class Solution:
    def frequencySort(self, s: str) -> str:
        char_frequency={}
        str1=""
        for ch in s:
            char_frequency[ch]=char_frequency.get(ch,0)+1
        sorted_char_frequency=dict(sorted(char_frequency.items(),key=lambda item:item[1],reverse=True))
        for key,value in sorted_char_frequency.items():
            str1=str1+key*value
        return str1    
  *************************************************************************
First unique character in string 

Example 1:

Input: s = "leetcode"

Output: 0

Explanation:

The character 'l' at index 0 is the first character that does not occur at any other index.

Example 2:

Input: s = "loveleetcode"

Output: 2

Example 3:

Input: s = "aabb"

Output: -1

class Solution:
    def firstUniqChar(self, s: str) -> int:
        dict1={}
        for ch in s:
            dict1[ch]=dict1.get(ch,0)+1
        for i in range(len(s)):

            if dict1[s[i]]==1:
                return i
        return -1        
*********************************************************************************
Find the index of the first occurance in the string

Example 1:

Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.
Example 2:

Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.
*******************************************
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
       n=len(haystack)
       n1=len(needle)
       bool=True
       for i in range((n-n1)+1):
        start=i
        bool=True
        for j in range(n1):
            if haystack[start]!=needle[j]:
                bool=False
            start=start+1
                
        if bool==True:
            return i
       return -1          

or
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
       n=len(haystack)
       n1=len(needle)
       for i in range(n-n1+1):
        if haystack[i:i+n1]==needle:
            return i
       return -1     


(or)
clss Solution:
    def strStr(self, haystack: str, needle: str) -> int:
       return haystack.find(needle)
**********************************************************************************************************************************************************

       
                           
        
