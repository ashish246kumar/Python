Sort character by frequency
Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.

class Solution:
    def frequencySort(self, s: str) -> str:
        char_frequency={}
        str1=""
        for ch in s:
            char_frequency[ch]=char_frequency.get(ch,0)+1
        sorted_char_frequency=dict(sorted(char_frequency.items(),key=lambda item:item[1],reverse=True))
        for key,value in sorted_char_frequency.items():
            str1=str1+key*value
        return str1    
  *************************************************************************
First unique character in string 

Example 1:

Input: s = "leetcode"

Output: 0

Explanation:

The character 'l' at index 0 is the first character that does not occur at any other index.

Example 2:

Input: s = "loveleetcode"

Output: 2

Example 3:

Input: s = "aabb"

Output: -1

class Solution:
    def firstUniqChar(self, s: str) -> int:
        dict1={}
        for ch in s:
            dict1[ch]=dict1.get(ch,0)+1
        for i in range(len(s)):

            if dict1[s[i]]==1:
                return i
        return -1        
*********************************************************************************
Find the index of the first occurance in the string

Example 1:

Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.
Example 2:

Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.
*******************************************
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
       n=len(haystack)
       n1=len(needle)
       bool=True
       for i in range((n-n1)+1):
        start=i
        bool=True
        for j in range(n1):
            if haystack[start]!=needle[j]:
                bool=False
            start=start+1
                
        if bool==True:
            return i
       return -1          

or
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
       n=len(haystack)
       n1=len(needle)
       for i in range(n-n1+1):
        if haystack[i:i+n1]==needle:
            return i
       return -1     


(or)
clss Solution:
    def strStr(self, haystack: str, needle: str) -> int:
       return haystack.find(needle)
**********************************************************************************************************************************************************
151 Reverse a word in the string
xample 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = "a good   example"
Output: "example good a"


class Solution:
    def reverseWords(self, s: str) -> str:
        l1=s.split()
        return " ".join(l1[::-1])

***********************************************************************************************************************************************************
Add String
xample 1:

Input: num1 = "11", num2 = "123"
Output: "134"
Example 2:

Input: num1 = "456", num2 = "77"
Output: "533"
Example 3:

Input: num1 = "0", num2 = "0"
Output: "0"
 
*************************************************************
class Solution:
    def addStrings(self, num1: str, num2: str) -> str:
        i=len(num1)-1
        j=len(num2)-1
        incr=0
        sum=""
        while(i>=0 or j>=0):
            a=int(num1[i]) if i>=0 else 0
            b=int(num2[j]) if j>=0 else 0
            rem=(a+b+incr)%10
            incr=(a+b+incr)//10
            sum=str(rem)+sum

            i=i-1
            j=j-1
        if incr!=0:
            sum=str(incr)+sum   
        return sum    

or 
class Solution:
    def addStrings(self, num1: str, num2: str) -> str:
       return str(int(num1)+int(num2))
4to 5 test case fail for large string
***************************************************************************************************************************
valid anagram
Example 1:

Input: s = "anagram", t = "nagaram"

Output: true

Example 2:

Input: s = "rat", t = "car"

Output: false
*********************************************
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        s1= ''.join(sorted(s))
        s2=''.join(sorted(t))
        if s1==s2:
            return True
        return False  
***********************************************************************************************************************************
valid parenthesis 
Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false


stack used
*******************************************************************************************************************888

class Solution:
    def isValid(self, s: str) -> bool:
        n=len(s)
        stack=[]
        for i in range(n):
            if s[i]=='(' or s[i]=='{' or s[i]=='[':
                stack.append(s[i])
            elif s[i]==')' and len(stack)!=0 and stack[-1]=='(':
                stack.pop()
            elif s[i]=='}' and len(stack)!=0 and stack[-1]=='{':
                stack.pop()
            elif s[i]==']' and len(stack)!=0 and stack[-1]=='[':
                stack.pop()
            else:
                return False
        if len(stack)==0:
            return True
        return False                        
******************************************************************************************************************************
Longest substring without repeating character

"qrsvbspk"
5
Example 2:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 3:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.



class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        l1=[]
        left=right=0
        max1=0
        while(right<len(s)):
            if s[right] in l1:
                while(s[right] in l1):
                    l1.remove(s[left])
                    left=left+1
                l1.append(s[right])
            else:
                l1.append(s[right]) 
                max1=max(max1,len(l1))
            right=right+1    
        return max1           
***************************************************************************************************************************
Rotate String
Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.

A shift on s consists of moving the leftmost character of s to the rightmost position.

For example, if s = "abcde", then it will be "bcdea" after one shift.
 

Example 1:

Input: s = "abcde", goal = "cdeab"
Output: true
Example 2:

Input: s = "abcde", goal = "abced"
Output: false

class Solution:
    def rotateString(self, s: str, goal: str) -> bool:
        n=len(s)
        n1=len(goal)
        if n!=n1:
            return False
        if s==goal:
            return True    
        for i in range(n-1):
            s1=s[i+1:n]+s[0:i+1]
            print(s1)
            if s1==goal:
                return True
        return False   

or
class Solution:
    def rotateString(self, s: str, goal: str) -> bool:
        return len(s)==len(goal) and (s+s).find(goal)!=-1
        
*******************************************************************************************************************************
        
Isomorphic string
Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 


class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:
        dict1={}
        dict2={}
        n1=len(s)
        for i in range(n1):
            if s[i] in dict1 and dict1.get(s[i])!=t[i]:
                return False
            else:
                dict1[s[i]]=t[i]
            if t[i] in dict2 and dict2.get(t[i])!=s[i]:
                return False
            else:
                dict2[t[i]]=s[i]    
        return True        

*************************************************************
        























                
            

        
               
                           
        
